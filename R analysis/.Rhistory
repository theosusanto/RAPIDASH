# going to generate a cpm version of data_rna and use that for determining which genes to keep.
data_rna_cpm <- cpm(data_rna, log=FALSE)
# generate the vector for which genes to keep
# if you don't want to use the filterByExpr function, can write your own
# criteria for which genes to keep
keep_cpm = filterByExpr(data_rna_cpm, min.count=10, group = data_rna$samples$group)
table(keep_cpm)
# plot CPM histograms to compare raw vs. filtered data
L <- mean(data_rna$samples$lib.size) * 1e-6
M <- median(data_rna$samples$lib.size) * 1e-6
lcpm.cutoff <- log2(10/M + 2/L)
library(RColorBrewer)
nsamples <- ncol(data_rna)
col <- brewer.pal(nsamples, "Paired")
par(mfrow=c(1,2))
lcpm <- cpm(data_rna, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="A. Raw RNA data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", rownames(data_rna$samples), text.col=col, bty="n")
# here is where I actually filter out the low-expressed genes from data_rna
data_rna = data_rna[keep_cpm, keep.lib.sizes=FALSE]
lcpm <- cpm(data_rna, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="B. Filtered RNA data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", rownames(data_rna$samples), text.col=col, bty="n")
# calculate normalizing factors for RNA samples
data_rna = calcNormFactors(data_rna, method='TMM')
# plot multidimensional scaling -- an unsupervised look at the biggest
# differences between samples
lcpm = cpm(data_rna, log=TRUE)
plotMDS(lcpm, labels=rownames(data_rna$samples))
plotMDS(lcpm, labels=rownames(data_rna$samples), dim.plot=c(3,4))
data_rna$samples
line = data_rna$samples$genotype
# this design matrix is fairly simple. we intend to compare by 'line', and lane' is included as batch variable
design_rna = model.matrix(~0+line, data=data_rna$samples)
colnames(design_rna) = gsub('>', '_to_', colnames(design_rna))
design_rna
# make contrasts
# rna_de = makeContrasts(linewt - lineNterm,
#                        levels=colnames(design_rna))
rna_de = makeContrasts(lineNterm - linewt,
levels=colnames(design_rna))
# perform voom
v_rna = voom(data_rna, design_rna, plot=TRUE)
# run the linear model
v_rna_fit = lmFit(v_rna, design_rna)
v_rna_fit = contrasts.fit(v_rna_fit, contrasts=rna_de)
e_rna_fit = eBayes(v_rna_fit)
plotSA(e_rna_fit, main='Final model: Mean-variance trend')
# test for any significantly diff expr genes
dt_rna = decideTests(e_rna_fit, p.value=0.1)
summary(dt_rna)
# plots for mean expr vs logFC
plotMD(e_rna_fit,
column=1,
status=dt_rna[,1],
main=colnames(e_rna_fit)[1],
ylim=c(-2,2))
# generate a table of all kept genes as ranked by p-value
ranked_genes = topTable(e_rna_fit, coef=1, number=sum(keep_cpm), sort.by='p')
# volcano plot
ranked_genes$neglog10p = -log(ranked_genes$adj.P.Val, 10)
ranked_genes$plot_fill = rep('black', nrow(ranked_genes))
ranked_genes[ranked_genes$logFC > 0.25 & ranked_genes$adj.P.Val < 0.05,'plot_fill'] = 'purple'
ranked_genes[ranked_genes$logFC < -0.25 & ranked_genes$adj.P.Val < 0.05,'plot_fill'] = 'magenta'
pal = c('black', 'magenta', 'purple')
ranked_genes$plot_fill = factor(ranked_genes$plot_fill, levels = pal)
options(repr.plot.width=4, repr.plot.height=4)
ggplot(data=ranked_genes, aes(x=logFC, y=neglog10p, color=plot_fill)) +
geom_point() +
scale_color_manual(values=pal) +
theme_classic() +
theme(legend.position='none')
# check distribution of p-values
hist(ranked_genes$P.Value)
# only the RPF samples on their own
counts_rfp = counts[,samples$RFP_or_RNA=='RFP']
samples_rfp = samples[samples$RFP_or_RNA=='RFP',]
group_rfp = samples_rfp$grouping
data_rfp = DGEList(counts = counts_rfp, samples = samples_rfp, group = group_rfp)
# filter out low-expressed genes
# try min.count = 10 (gene has to be expressed above 10 counts in a 'meaningful' number of samples)
# ^^ min.count = 10 is actually the default, I believe
# I think 'meaningful' is defined by the group attribute of data_rna
# the edgeR User's Guide mentions this should be performed on normalized counts,
# but in all the examples it's done before TMM normalization...
# going to generate a cpm version of data_rna and use that for determining which genes to keep.
data_rfp_cpm <- cpm(data_rfp, log=FALSE)
head(data_rfp_cpm)
# generate the vector for which genes to keep
# if you don't want to use the filterByExpr function, can write your own
# criteria for which genes to keep
keep_cpm = filterByExpr(data_rfp_cpm, min.count=10, group = data_rfp$samples$group)
table(keep_cpm)
# plot CPM histograms to compare raw vs. filtered data
L <- mean(data_rfp$samples$lib.size) * 1e-6
M <- median(data_rfp$samples$lib.size) * 1e-6
lcpm.cutoff <- log2(10/M + 2/L)
library(RColorBrewer)
nsamples <- ncol(data_rfp)
col <- brewer.pal(nsamples, "Paired")
par(mfrow=c(1,2))
lcpm <- cpm(data_rfp, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="A. Raw RFP data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", rownames(data_rfp$samples), text.col=col, bty="n")
# here is where I actually filter out the low-expressed genes from data_rfp
data_rfp = data_rfp[keep_cpm, keep.lib.sizes=FALSE]
lcpm <- cpm(data_rfp, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="B. Filtered RFP data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", rownames(data_rfp$samples), text.col=col, bty="n")
# calculate normalizing factors for RNA samples
data_rfp = calcNormFactors(data_rfp, method='TMM')
# plot multidimensional scaling -- an unsupervised look at the biggest
# differences between samples
lcpm = cpm(data_rfp, log=TRUE)
plotMDS(lcpm, labels=rownames(data_rfp$samples))
plotMDS(lcpm, labels=rownames(data_rfp$samples), dim.plot=c(3,4))
line = data_rfp$samples$genotype
# this design matrix is fairly simple. we intend to compare by 'line', and lane' is included as batch variable
design_rfp = model.matrix(~0+line, data=data_rfp$samples)
colnames(design_rfp) = gsub('>', '_to_', colnames(design_rfp))
design_rfp
# make contrasts
# rfp_de = makeContrasts(linewt - lineNterm,
#                        levels=colnames(design_rfp))
rfp_de = makeContrasts(lineNterm - linewt,
levels=colnames(design_rfp))
rfp_de
# perform voom
v_rfp = voom(data_rfp, design_rfp, plot=TRUE)
# run the linear model
v_rfp_fit = lmFit(v_rfp, design_rfp)
v_rfp_fit = contrasts.fit(v_rfp_fit, contrasts=rfp_de)
e_rfp_fit = eBayes(v_rfp_fit)
plotSA(e_rfp_fit, main='Final model: Mean-variance trend')
# test for any significantly diff expr genes
dt_rfp = decideTests(e_rfp_fit, adjust.method = 'BH', p.value=0.1)
summary(dt_rfp)
# plots for mean expr vs logFC
plotMD(e_rfp_fit,
column=1,
status=dt_rfp[,1],
main=colnames(e_rfp_fit)[1],
ylim=c(-2,2))
# generate a table of all kept genes as ranked by p-value
ranked_genes_rfp = topTable(e_rfp_fit, coef=1, number=sum(keep_cpm), sort.by='p')
# create a DGE data object for all RNA and RPF samples
data_all = DGEList(counts = counts, samples = samples, group = samples$grouping)
# filter out low-expressed genes
# when calculating TE, Gerald filters by genes that are expressed at CPM > 1 in at least a min
# number of RPF libraries, b/c his RPF libraries have fewer reads...my RPF and RNA libraries are
# pretty similar in size...
# try min.count = 10 (gene has to be expressed above 10 counts in a 'meaningful' number of samples)
# ^^ min.count = 10 is actually the default, I believe
# I think 'meaningful' is defined by the group attribute of data_rna
# the edgeR User's Guide mentions this should be performed on normalized counts,
# but in all the examples it's done before TMM normalization...
# going to generate a cpm version of data_rna and use that for determining which genes to keep.
data_all_cpm <- cpm(data_all, log=FALSE)
# generate the vector for which genes to keep
keep_all_cpm = filterByExpr(data_all_cpm, min.count=10, data_all$samples$group)
table(keep_all_cpm)
# plot CPM histograms to compare raw vs. filtered data
L <- mean(data_all$samples$lib.size) * 1e-6
M <- median(data_all$samples$lib.size) * 1e-6
lcpm.cutoff <- log2(10/M + 2/L)
library(RColorBrewer)
nsamples <- ncol(data_all)
col <- brewer.pal(nsamples, "Paired")
par(mfrow=c(1,2))
lcpm <- cpm(data_all, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="A. Raw RNA and RPF data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", rownames(data_all$samples), text.col=col, bty="n")
# here is where I actually filter out the low-expressed genes from data_all
data_all = data_all[keep_all_cpm, keep.lib.sizes=FALSE]
lcpm <- cpm(data_all, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.26), las=2, main="", xlab="")
title(main="B. Filtered RNA and RPF data", xlab="Log-cpm")
abline(v=lcpm.cutoff, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", rownames(data_all$samples), text.col=col, bty="n")
# make subsets of data_all for just the RNA and ribo samples, so I can run TMM normalization on them separately.
data_rna_for_tmm = data_all[,samples$RFP_or_RNA=='RNA']
data_rna_for_tmm = calcNormFactors(data_rna_for_tmm, method='TMM')
data_rpf_for_tmm = data_all[,samples$RFP_or_RNA=='RFP']
data_rpf_for_tmm = calcNormFactors(data_rpf_for_tmm, method='TMM')
# recombine the separately calculated normalization factors into data_all
data_all$samples$norm.factors[samples$RFP_or_RNA=='RNA'] = data_rna_for_tmm$samples$norm.factors
data_all$samples$norm.factors[samples$RFP_or_RNA=='RFP'] = data_rpf_for_tmm$samples$norm.factors
# Set TE
data_all_te <- data_all
# plot MDS -- not very informative since of course the 1st PC is RNA vs RPF
lcpm_all = cpm(data_all, log=TRUE)
plotMDS(lcpm, labels=rownames(data_all$samples))
plotMDS(lcpm, labels=rownames(data_all$samples), dim.plot=c(3,4))
# displaying again for easy reference in constructing design_all matrix
data_all$samples
# our goal here is very similar to the example in the edgeR User's guide in section 3.5,
# 'Comparisons both between and within subjects'. The analogies are:
# Healthy/Disease1/Disease2 ~ S27>S27L, S27L>S27, and Unedited
# each patient ~ each replicate (note that in the example, they re-number their patients
# such that they have a patient #1, #2, and #3 in each disease)
# Treatment (hormone or none) (w/ a pair of treated/untreated samples for each patient) ~ RPF vs RNA
# In the example they don't include the '0' so it's just ~Disease; I think it's more
# intuitive to include the 0 so it's explicitly clear what baseline is being subtracted
# however this only seems to solve this for the line variable, not lane or fraction...
#
# line = factor(data_all$samples$genotype, levels=c('wt', 'Nterm'))
# fraction = factor(data_all$samples$RFP_or_RNA, levels=c('RNA', 'RFP'))
#
# design_all = model.matrix(~0+line+fraction:line, data=data_all$samples)
# colnames(design_all) = gsub(':', '_', colnames(design_all))
# design_all
# make contrasts
# diff_te = makeContrasts(lineNterm_fractionRFP-linewt_fractionRFP,
#                         levels=colnames(design_all))
#
# diff_te
line = factor(data_all$samples$genotype, levels=c('wt', 'Nterm'))
fraction = factor(data_all$samples$RFP_or_RNA, levels=c('RNA', 'RFP'))
design_all = model.matrix(~0+line:fraction, data=data_all$samples)
colnames(design_all) = gsub(':', '_', colnames(design_all))
design_all
# diff_te = makeContrasts(
#     wt_TE_vs_Nterm_TE = (linewt_fractionRFP-linewt_fractionRNA) - (lineNterm_fractionRFP-lineNterm_fractionRNA),
#                          levels=colnames(design_all))
diff_te = makeContrasts(
Nterm_TE_vs_wt_TE = (lineNterm_fractionRFP-lineNterm_fractionRNA) - (linewt_fractionRFP-linewt_fractionRNA),
levels=colnames(design_all))
diff_te
# perform voom
v_te = voom(data_all, design_all, plot=TRUE)
# note that the v_te$E matrix is pretty close to a log2(CPM + something)
# (online documentation calls this a 'normalized counts' matrix)
# I checked this by manually dividing the raw values in data_all$counts by data_all$samples$lib.size
# and taking log2 -- the results aren't identical to v_te$E but at least for the first 4x4 entries
# (which are all in the 2^5 to 2^8 range for CPM) they are within 0.01 (in log space)
v_te_fit = lmFit(v_te, design_all)
v_te_fit = contrasts.fit(v_te_fit, contrasts=diff_te)
e_te_fit = eBayes(v_te_fit)
plotSA(e_te_fit, main="Final model: Mean-variance trend")
dt_te = decideTests(e_te_fit, p.value=0.1)
summary(dt_te)
head(e_te_fit)
#output_file <- "wtRFP-NtermRFP_plotMD_output.pdf"
#pdf(output_file)
plotMD(e_te_fit, column=1, status=dt_te[,1], main=colnames(e_te_fit)[1])
#dev.off()
# volcano plot
top_te_genes = topTable(e_te_fit, coef=1, number=sum(keep_all_cpm), sort.by='p')
top_te_genes$neglog2p = -log(top_te_genes$adj.P.Val, 2)
top_te_genes$plot_fill = rep('black', nrow(top_te_genes))
top_te_genes[top_te_genes$logFC > 0.25 & top_te_genes$adj.P.Val < 0.05,'plot_fill'] = 'purple'
top_te_genes[top_te_genes$logFC < -0.25 & top_te_genes$adj.P.Val < 0.05,'plot_fill'] = 'magenta'
pal = c('black', 'magenta', 'purple')
top_te_genes$plot_fill = factor(top_te_genes$plot_fill, levels = pal)
options(repr.plot.width=4, repr.plot.height=4)
ggplot(data=top_te_genes,
aes(x=logFC, y=neglog2p, color=plot_fill)) +
geom_point() +
scale_color_manual(values=pal) +
theme_classic() +
theme(legend.position='none')
head(top_te_genes)
# check distribution of p-values
hist(top_te_genes$P.Value)
# check correlation between samples
cor(v_te$E)
# shortcut for finding the rowname corresponding to a gene
# EGR1
rownames(v_te$E)[grep('COL9A3', rownames(v_te$E))]
library(repr)
options(repr.plot.width=4, repr.plot.height=4)
goi = 'COL9A3_ENSG00000092758_ENST00000649368'
# goi = 'LEF1_ENSG00000138795_ENST00000265165'
# goi = 'LLPH_ENST00000266604'
norm_counts = 2^v_te$E[goi,]
palette = c('purple1', 'purple4', 'magenta', 'magenta4', 'gray50', 'gray20')
df = data.frame(sample = names(norm_counts), cpm = norm_counts)
df = separate(df, sample, c("genotype", "replicate", "fraction"))
df$lines = factor(df$genotype, levels=c('wt', 'Nterm'))
df$xlabels = factor(paste(df$genotype, df$fraction, sep="_"),
levels=c('wt_RNA',
'wt_RFP',
'Nterm_RNA',
'Nterm_RFP'))
p1 = ggplot(df, aes(x=xlabels, y=cpm))
p1 + geom_point(aes(color = xlabels), size=2.5) + geom_path(group=df$xlabels) + ggtitle(goi) + theme_classic() + theme(legend.position = 'none', axis.text.x = element_text(angle = 90)) + expand_limits(y=0) + scale_color_manual(values = palette)
library(repr)
options(repr.plot.width=4, repr.plot.height=4)
# shortcut for finding the rowname corresponding to a gene
# EGR1
rownames(v_te$E)[grep('CDH1', rownames(v_te$E))]
# goi = c('COL9A3_ENSG00000092758_ENST00000649368',
#         'CDH1_ENSG00000039068_ENST00000261769',
#         'LEF1_ENSG00000138795_ENST00000265165')
# goi = 'LLPH_ENST00000266604'
# norm_counts = 2^v_te$E[goi,]
df_wide <- as_tibble(2^v_te$E) %>% mutate(gene = rownames(2^v_te$E), .before=1)
df_tall <- gather(df_wide, key = "sample", value = "cpm", -gene)
df_tall <- separate(df_tall, sample, c("genotype", "replicate", "fraction"))
df_tall_te <- spread(df_tall, key = fraction, value = cpm)
df_tall_te$TE <- df_tall_te$RFP/df_tall_te$RNA
df_tall_te <- separate(df_tall_te, gene, c("gene_name", "ensembl_gene", "transcript_id"),sep = "_", remove = FALSE, extra = "drop")
df_tall_te_only <- df_tall_te %>%
dplyr::select(-RNA, -RFP) %>%
pivot_wider(names_from = replicate, values_from = TE) %>%
rowwise() %>%
mutate(ave_te = mean(c(rep1, rep2, rep3), na.rm = TRUE),
std_te = sd(c(rep1, rep2, rep3), na.rm = TRUE))
summary <- df_tall_te_only %>%
pivot_longer(cols = c(rep1, rep2, rep3), names_to = c("replicate"), values_to = "values")
# Create an empty data frame to store the t-test results
t_test_results <- data.frame(transcript_id = character(0),
p_value = numeric(0))
# Perform t-test for each 'transcript_id'
for (tid in unique(summary$transcript_id)) {
subset_data <- summary %>% filter(tid == .data$transcript_id)
t_test_result <- t.test(values ~ genotype, data = subset_data)
t_test_results <- rbind(t_test_results,
data.frame(transcript_id = tid, p_value = t_test_result$p.value))
}
summary_ttest <- summary %>%
dplyr::select(-values, -replicate) %>%
distinct() %>%
pivot_wider(names_from = genotype, values_from = c(ave_te, std_te)) %>%
mutate(diff_te = ave_te_Nterm/ave_te_wt,
downregulated = ifelse(diff_te > 1, 0, 1)) %>%
full_join(t_test_results, by = "transcript_id")
summary_ttest <- summary_ttest %>%
arrange(p_value)
# write.csv(summary_ttest, file = "TE_with_ttest.csv", row.names = FALSE)
# df_tall$lines = factor(df_tall$genotype, levels=c('wt', 'Nterm'))
# df_tall$xlabels = factor(paste(df_tall$genotype, df_tall$fraction, sep="_"),
#                          levels=c('wt_RNA', 'wt_RFP', 'Nterm_RNA', 'Nterm_RFP'))
#palette = c('purple1', 'purple4', 'magenta', 'magenta4', 'gray50', 'gray20')
# subset_tids <- c('CSPG4_ENSG00000173546_ENST00000308508',
#                  'RHOBTB2_ENSG00000008853_ENST00000251822',
#                  'FNTA_ENSG00000168522_ENST00000302279',
#                  'MYORG_ENSG00000164976_ENST00000297625',
#                  'PABPC5_ENSG00000174740_ENST00000312600')
# subset_tids <- c('PCDHB5_ENSG00000113209_ENST00000231134',
#                  'CDH5_ENSG00000179776_ENST00000341529',
#                  'PCOLCE2_ENSG00000163710_ENST00000295992',
#                  'PCDHA10_ENSG00000250120_ENST00000307360',
#                  'RAPGEF6_ENSG00000158987_ENST00000509018')
subset_tids <- c('CSPG4_ENSG00000173546_ENST00000308508',
'RHOBTB2_ENSG00000008853_ENST00000251822',
'TTC23_ENSG00000103852_ENST00000394132',
'MYORG_ENSG00000164976_ENST00000297625',
'SEMA3A_ENSG00000075213_ENST00000265362')
plot <- summary %>%
dplyr::filter(gene %in% subset_tids)
plot$genotype <- factor(plot$genotype, levels=c('wt', 'Nterm'))
custom_fill <- c("gray80", "gray40")
ggplot(plot, aes(x=genotype, y=ave_te, fill = genotype)) +
geom_bar(stat = "identity", position = "dodge") +
geom_errorbar(
aes(ymin = ave_te - std_te, ymax = ave_te + std_te),
position = position_dodge(width = 0.8),
width = 0.2
) +
facet_wrap (~ gene_name, scales = "free_y", ncol = 5) +
scale_fill_manual(values = custom_fill) +
theme_classic() +
theme(legend.position = 'none', axis.text.x = element_text(angle = 90)) +
expand_limits(y=0)
# ggsave("ecm_genes_downregulated_nterm.pdf", width=12, height=9)
ggsave("disease_genes_downregulated_nterm.pdf", width=12, height=9)
#
# Scatter plot of rna and rfp sig. genes
keep_rfp_cpm = filterByExpr(data_rfp_cpm, min.count=10, group = data_rfp$samples$group)
keep_rna_cpm = filterByExpr(data_rna_cpm, min.count=10, group = data_rna$samples$group)
toptable_rfp = topTable(e_rfp_fit, coef=1, number=sum(keep_rfp_cpm), sort.by='p')
toptable_rna = topTable(e_rfp_fit, coef=1, number=sum(keep_rna_cpm), sort.by='p')
rfp_fc_sig <- tibble("gene" =  row.names(toptable_rfp),
"RFP_Nterm-wt_fc" = toptable_rfp$logFC,
"RFP_Nterm-wt_sig" = toptable_rfp$adj.P.Val)
rna_fc_sig <- tibble("gene" = row.names(toptable_rna),
"RNA_Nterm-wt_fc" = toptable_rna$logFC,
"RNA_Nterm-wt_sig" = toptable_rna$adj.P.Val)
all_fc_sig <- full_join(rfp_fc_sig, rna_fc_sig, by = "gene") %>%
separate(gene, into = c("gene_name", "geneID", "transcriptID"), sep = "_", remove = FALSE)
all_fc_sig$entrez <- mapIds(org.Hs.eg.db, keys=all_fc_sig$geneID, column="ENTREZID", keytype="ENSEMBL", multiVals="first")
# 0 is not sig, 1 is only sig in rna, 2 is only sig in rfp, 3 is sig in both.
all_fc_sig$group <- factor(1 * (all_fc_sig$`RNA_Nterm-wt_sig` < 0.1) + 2 * (all_fc_sig$`RFP_Nterm-wt_sig` < 0.1))
# rfp_fc_sig <- tibble("gene" =  row.names(e_rfp_fit$coefficients),
#                      "RFP_Nterm-wt_fc" = e_rfp_fit$coefficients[,1],
#                      "RFP_Nterm-wt_sig" = as.vector(dt_rfp))
# rna_fc_sig <- tibble("gene" = row.names(e_rna_fit$coefficients),
#                      "RNA_Nterm-wt_fc" = e_rna_fit$coefficients[,1],
#                      "RNA_Nterm-wt_sig" = as.vector(dt_rna))
# all_fc_sig <- full_join(rfp_fc_sig, rna_fc_sig, by = "gene") %>%
#   separate(gene, into = c("gene_name", "geneID", "transcriptID"), sep = "_", remove = FALSE)
# all_fc_sig$entrez <- mapIds(org.Hs.eg.db, keys=all_fc_sig$geneID, column="ENTREZID", keytype="ENSEMBL", multiVals="first")
#
# # 0 is not sig, 1 is only sig in rna, 2 is only sig in rfp, 3 is sig in both.
# all_fc_sig$group <- factor(
#   1 * (!is.na (all_fc_sig$`RNA_Nterm-wt_sig`) & all_fc_sig$`RNA_Nterm-wt_sig` != 0) +
#     2 * (!is.na (all_fc_sig$`RFP_Nterm-wt_sig`) & all_fc_sig$`RFP_Nterm-wt_sig` != 0)
# )
palette = c('black', 'blue', 'red', 'magenta4')
legends = c('no change', 'transcriptional changes', 'translational changes', 'both')
ggplot(all_fc_sig, aes(x=`RNA_Nterm-wt_fc`, y=`RFP_Nterm-wt_fc`)) +
geom_point(aes(color = group), size = 1) +
scale_color_manual(
values = palette,
labels = legends) +
theme_minimal() +
xlim(-2, 2) + ylim (-2, 2) +
xlab("Log2 FC transcriptome") + ylab("Log2 FC translatome")
# write.csv(all_fc_sig, file = "all_fc_sig_hiNs_d14.csv", quote = FALSE, sep = ",", row.names = FALSE)
# ggsave("rna_rfp_sig_genes.pdf", width=12, height=9)
?decideTests
rfp_fc_sig <- tibble("gene" =  row.names(e_rfp_fit$coefficients),
"RFP_Nterm-wt_fc" = e_rfp_fit$coefficients[,1],
"RFP_Nterm-wt_sig" = as.vector(dt_rfp))
rna_fc_sig <- tibble("gene" = row.names(e_rna_fit$coefficients),
"RNA_Nterm-wt_fc" = e_rna_fit$coefficients[,1],
"RNA_Nterm-wt_sig" = as.vector(dt_rna))
all_fc_sig <- full_join(rfp_fc_sig, rna_fc_sig, by = "gene") %>%
separate(gene, into = c("gene_name", "geneID", "transcriptID"), sep = "_", remove = FALSE)
all_fc_sig$entrez <- mapIds(org.Hs.eg.db, keys=all_fc_sig$geneID, column="ENTREZID", keytype="ENSEMBL", multiVals="first")
# 0 is not sig, 1 is only sig in rna, 2 is only sig in rfp, 3 is sig in both.
all_fc_sig$group <- factor(
1 * (!is.na (all_fc_sig$`RNA_Nterm-wt_sig`) & all_fc_sig$`RNA_Nterm-wt_sig` != 0) +
2 * (!is.na (all_fc_sig$`RFP_Nterm-wt_sig`) & all_fc_sig$`RFP_Nterm-wt_sig` != 0)
)
palette = c('black', 'blue', 'red', 'magenta4')
legends = c('no change', 'transcriptional changes', 'translational changes', 'both')
ggplot(all_fc_sig, aes(x=`RNA_Nterm-wt_fc`, y=`RFP_Nterm-wt_fc`)) +
geom_point(aes(color = group), size = 1) +
scale_color_manual(
values = palette,
labels = legends) +
theme_minimal() +
xlim(-2, 2) + ylim (-2, 2) +
xlab("Log2 FC transcriptome") + ylab("Log2 FC translatome")
dt_rfp
e_rfp_fit
p.adjust(e_rfp_fit$p.value, method = "BH", n = length(e_rfp_fit$p.value))
rfp_fc_sig <- tibble("gene" =  row.names(e_rfp_fit$coefficients),
"RFP_Nterm-wt_fc" = e_rfp_fit$coefficients[,1],
"RFP_Nterm-wt_sig" = as.vector(dt_rfp),
"RFP_Nterm-wt_FDR" = p.adjust(e_rfp_fit$p.value, method = "BH", n = length(e_rfp_fit$p.value)))
rna_fc_sig <- tibble("gene" = row.names(e_rna_fit$coefficients),
"RNA_Nterm-wt_fc" = e_rna_fit$coefficients[,1],
"RNA_Nterm-wt_sig" = as.vector(dt_rna),
"RNA_Nterm-wt_FDR" = p.adjust(e_rna_fit$p.value, method = "BH", n = length(e_rfp_fit$p.value)))
rfp_fc_sig <- tibble("gene" =  row.names(e_rfp_fit$coefficients),
"RFP_Nterm-wt_fc" = e_rfp_fit$coefficients[,1],
"RFP_Nterm-wt_sig" = as.vector(dt_rfp),
"RFP_Nterm-wt_FDR" = p.adjust(e_rfp_fit$p.value, method = "BH", n = length(e_rfp_fit$p.value)))
rna_fc_sig <- tibble("gene" = row.names(e_rna_fit$coefficients),
"RNA_Nterm-wt_fc" = e_rna_fit$coefficients[,1],
"RNA_Nterm-wt_sig" = as.vector(dt_rna),
"RNA_Nterm-wt_FDR" = p.adjust(e_rna_fit$p.value, method = "BH", n = length(e_rna_fit$p.value)))
all_fc_sig <- full_join(rfp_fc_sig, rna_fc_sig, by = "gene") %>%
separate(gene, into = c("gene_name", "geneID", "transcriptID"), sep = "_", remove = FALSE)
all_fc_sig$entrez <- mapIds(org.Hs.eg.db, keys=all_fc_sig$geneID, column="ENTREZID", keytype="ENSEMBL", multiVals="first")
# 0 is not sig, 1 is only sig in rna, 2 is only sig in rfp, 3 is sig in both.
all_fc_sig$group <- factor(
1 * (!is.na (all_fc_sig$`RNA_Nterm-wt_sig`) & all_fc_sig$`RNA_Nterm-wt_sig` != 0) +
2 * (!is.na (all_fc_sig$`RFP_Nterm-wt_sig`) & all_fc_sig$`RFP_Nterm-wt_sig` != 0)
)
# dt_rfp = decideTests(e_rfp_fit, adjust.method = 'BH', p.value=0.1)
palette = c('black', 'blue', 'red', 'magenta4')
legends = c('no change', 'transcriptional changes', 'translational changes', 'both')
ggplot(all_fc_sig, aes(x=`RNA_Nterm-wt_fc`, y=`RFP_Nterm-wt_fc`)) +
geom_point(aes(color = group), size = 1) +
scale_color_manual(
values = palette,
labels = legends) +
theme_minimal() +
xlim(-2, 2) + ylim (-2, 2) +
xlab("Log2 FC transcriptome") + ylab("Log2 FC translatome")
write.csv(all_fc_sig, file = "all_fc_sig_hiNs_d14.csv", quote = FALSE, sep = ",", row.names = FALSE)
edgeR
?edgeR
?voom
