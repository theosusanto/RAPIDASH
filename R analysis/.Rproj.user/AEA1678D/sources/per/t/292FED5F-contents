tryCatch(expr = { library("GSA")}, 
         error = function(e) { source("https://bioconductor.org/biocLite.R")
           biocLite("GSA")}, 
         finally = library("GSA"))

tryCatch(expr = { library("RCurl")}, 
         error = function(e) { 
           install.packages("RCurl")}, 
         finally = library("RCurl"))

tryCatch(expr = { library("corrplot")}, 
         error = function(e) { 
           install.packages("corrplot")}, 
         finally = library("corrplot"))

library(limma)
library(Glimma)
library(edgeR)
library(R.utils)
require("ggplot2")
require("reshape2")
require("knitr")
require("devtools")
require("ggbiplot")
library("ggfortify")
require("dplyr")
require("edgeR")
require("RColorBrewer")
require("gplots")
library("data.table")
require("ggrepel")
require("ggpubr")

# Read in files
# Note decide if I want cds_counts or ribo_cds_rna_total_counts
df_counts <- read.csv("ribo_cds_rna_total_counts.csv", stringsAsFactor=FALSE, header=TRUE)
# df_counts <- read.csv("cds_counts.csv", stringsAsFactor=FALSE, header=TRUE)
colnames(df_counts) <- gsub(".txt", "", colnames(df_counts))

df_samples <- read.csv("samples.csv", stringsAsFactor=FALSE, header=TRUE)
df_gene_annot <- read.csv("gene_annotations.csv", stringsAsFactor=FALSE, header=TRUE)

# IMPORTANT: Make sure df_counts and df_gene_annot have same gene_ID order
all.equal(df_counts$gene_ID, df_gene_annot$gene_ID)

for(i in 4:ncol(df_samples)){
  print(df_samples[,i])
}

for(i in 4:ncol(df_samples)){
  df_samples[,i] <- as.factor(df_samples[,i])
}

for(i in 4:ncol(df_samples)){
  print(df_samples[,i])
}

# Create DGEList
expr <- DGEList(counts=df_counts[-1])
rownames(expr$counts) <- df_counts[,1]

# Modify expr$samples
expr$samples <- cbind(expr$samples, df_samples)

# Make gene annotation data frame
expr$genes <- df_gene_annot[!duplicated(df_gene_annot$gene_ID),]

# Transform data
cpm <- cpm(expr)
lcpm <- cpm(expr, log=TRUE)

# Remove genes that are lowly expressed
expr$counts[rowSums(expr$counts==0)==24,]
table(rowSums(expr$counts==0)==24)

# Filter by genes that have cpm>1 for at least 3 Ribo libraries
# Ribo has less reads
ribo_cpm <- cpm[,grep("Ribo", colnames(cpm))]
keep.exprs <- rowSums(ribo_cpm>0.75)>=3
expr <- expr[keep.exprs,, keep.lib.sizes=FALSE]
dim(expr)

### Set variables for analysis
# Indices
ribo_ind <- which(expr$samples$type=="Ribo")
rna_ind <- which(expr$samples$type=="RNA")

# p_cutoff
p_cutoff_ribo <- 0.1
p_cutoff_rna <- 0.1
p_cutoff_te <- 0.1


# Make separate expr object for Ribo and Rna
# Ribo
expr_ribo <- expr[,ribo_ind]
# RNA
expr_rna <- expr[,rna_ind]
# Set TE after normalization


# Normalize data (calculate differently between rna and ribo and concatenate)
# Ribo
expr_ribo <- calcNormFactors(expr_ribo, method = "TMM")
expr_ribo$samples$norm.factors

# RNA
expr_rna <- calcNormFactors(expr_rna, method = "TMM")
expr_rna$samples$norm.factors

# All - calculate norm factors separately for RNA and Ribo and then combine (for now)
# expr <- calcNormFactors(expr, method = "TMM")
# expr$samples$norm.factors

expr$samples$norm.factors[ribo_ind] <- expr_ribo$samples$norm.factors
expr$samples$norm.factors[rna_ind] <- expr_rna$samples$norm.factors
expr$samples$norm.factors

# Set TE
expr_te <- expr

# Plot log cpm (read) density plot
tiff("log_cpm_density_plot.tif", width=960, height=960)
nsamples <- ncol(expr)
col <- brewer.pal(12, "Paired")
col <- colorRampPalette(col)(25)
par(mfrow=c(1,2))
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.21), las=2, 
     main="", xlab="")
title(main="A. Raw data", xlab="Log-cpm")
abline(v=0, lty=3)
for (i in 2:nsamples){
  den <- density(lcpm[,i])
  lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", rownames(expr$samples), text.col=col, pt.cex = 1, cex=0.8, bty="n")
lcpm <- cpm(expr, log=TRUE)
plot(density(lcpm[,1]), col=col[1], lwd=2, ylim=c(0,0.21), las=2, 
     main="", xlab="")
title(main="B. Filt/normalized data", xlab="Log-cpm")
abline(v=0, lty=3)
for (i in 2:nsamples){
  den <- density(lcpm[,i])
  lines(den$x, den$y, col=col[i], lwd=2)
}
legend("topright", rownames(expr$samples), text.col=col, pt.cex = 1, cex=0.8, bty="n")
dev.off()

# Make MDS plots
# Note MDS plots have Ribo and RNA mixed as averages on x-axis, might want to change in future

# make log counts for ribo_RNA
lcpm <- cpm(expr, log=TRUE)
lcpm_ribo <- lcpm[,ribo_ind]
lcpm_rna <- lcpm[,rna_ind]

# subset expr$samples
expr_samp_ribo <- expr$samples[ribo_ind,]
expr_samp_rna <- expr$samples[rna_ind,]

# Ribo
html_folder <- "mds_ribo"
html_file_name <- "mds_ribo"
glMDSPlot(lcpm_ribo, labels=expr_samp_ribo$name, 
          groups=expr_samp_ribo[,c(7:32)], folder=html_folder, html=html_file_name, launch=FALSE)

# RNA
html_folder <- "mds_rna"
html_file_name <- "mds_rna"
glMDSPlot(lcpm_rna, labels=expr_samp_rna$name, 
          groups=expr_samp_rna[,c(7:32)], folder=html_folder, html=html_file_name, launch=FALSE)

# 20180310: Dimension 1 = CreS6 vs. everything else; Dimension 2 = sex (especailly FF vs. MF/MM)

# Plot MDS for relevant factors
# Ribo
tiff("mds_ribo.tif", width=720, height=720)
par(mfrow=c(1,2))
col.genotype <- expr_samp_ribo$genotype
levels(col.genotype) <-  brewer.pal(nlevels(col.genotype), "Set1")
col.genotype <- as.character(col.genotype)
col.sex <- expr_samp_ribo$sex
levels(col.sex) <-  brewer.pal(nlevels(col.sex), "Set2")
col.sex <- as.character(col.sex)
plotMDS(lcpm_ribo, labels=expr_samp_ribo$genotype, col=col.genotype, dim=c(1,2))
title(main="A. Genotype - Ribo")
plotMDS(lcpm_ribo, labels=expr_samp_ribo$sex, col=col.sex, dim=c(1,2))
title(main="B. Sex - Ribo")
dev.off()

# RNA
tiff("mds_rna.tif", width=720, height=720)
par(mfrow=c(1,2))
col.genotype <- expr_samp_rna$genotype
levels(col.genotype) <-  brewer.pal(nlevels(col.genotype), "Set1")
col.genotype <- as.character(col.genotype)
col.sex <- expr_samp_rna$sex
levels(col.sex) <-  brewer.pal(nlevels(col.sex), "Set2")
col.sex <- as.character(col.sex)
plotMDS(lcpm_rna, labels=expr_samp_rna$genotype, col=col.genotype, dim=c(1,2))
title(main="A. Genotype - RNA")
plotMDS(lcpm_rna, labels=expr_samp_rna$sex, col=col.sex, dim=c(1,2))
title(main="B. Sex - RNA")
dev.off()

#### Do design separate for RNA and then run separately

#Set experimental variables for making design matrix for use with LM
t <- expr$samples$type
geno <- expr$samples$genotype
repl <- expr$samples$replicate
sff <- expr$samples$sex_ff
geno_t <- paste(geno, t, sep="_")
geno_t <- as.factor(geno_t)

# Ribo
t_ribo <- expr_ribo$samples$type
geno_ribo <- expr_ribo$samples$genotype
repl_ribo <- expr_ribo$samples$replicate
sff_ribo <- expr_ribo$samples$sex_ff
geno_t_ribo <- paste(geno_ribo, t_ribo, sep="_")
geno_t_ribo <- as.factor(geno_t_ribo)

# RNA
t_rna <- expr_rna$samples$type
geno_rna <- expr_rna$samples$genotype
repl_rna <- expr_rna$samples$replicate
sff_rna <- expr_rna$samples$sex_ff
geno_t_rna <- paste(geno_rna, t_rna, sep="_")
geno_t_rna <- as.factor(geno_t_rna)

# TE (this is essentially the same as the base - but just convenient for naming)
t_te <- expr_te$samples$type
geno_te <- expr_te$samples$genotype
repl_te <- expr_te$samples$replicate
sff_te <- expr_te$samples$sex_ff
geno_t_te <- paste(geno_te, t_te, sep="_")
geno_t_te <- as.factor(geno_t_te)


# Ribo
# Create design matrix
# May want to include sex and/or replicate for batch variables
design_ribo <- model.matrix(~0+geno_t_ribo+repl_ribo+sff_ribo)
colnames(design_ribo) <- gsub("geno_t_ribo", "", colnames(design_ribo))
design_ribo

# Create contrast matrix
contr.matrix_ribo <- makeContrasts(
  s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo = s6het_p53wt_Ribo-s6wt_p53wt_Ribo, 
  s6het_p53null_Ribo_vs_s6wt_p53null_Ribo = s6het_p53null_Ribo-s6wt_p53null_Ribo, 
  s6wt_p53null_Ribo_vs_s6wt_p53wt_Ribo = s6wt_p53null_Ribo-s6wt_p53wt_Ribo, 
  s6het_p53null_Ribo_vs_s6het_p53wt_Ribo = s6het_p53null_Ribo-s6het_p53wt_Ribo, 
  s6wt_p53wt_Ribo_vs_s6wt_p53null_Ribo = s6wt_p53wt_Ribo-s6wt_p53null_Ribo,
  s6het_p53wt_Ribo_vs_s6het_p53null_Ribo = s6het_p53wt_Ribo-s6het_p53null_Ribo, 
  s6het_p53null_Ribo_vs_s6wt_p53wt_Ribo = s6het_p53null_Ribo-s6wt_p53wt_Ribo,
  s6het_p53wt_Ribo_vs_s6wt_p53null_Ribo = s6het_p53wt_Ribo-s6wt_p53null_Ribo,
  s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo_minus_s6het_p53null_Ribo_vs_s6wt_p53null_Ribo = 
    (s6het_p53wt_Ribo-s6wt_p53wt_Ribo)-(s6het_p53null_Ribo-s6wt_p53null_Ribo),
  s6het_p53null_Ribo_vs_s6het_p53wt_Ribo_minus_s6wt_p53null_Ribo_vs_s6wt_p53wt_Ribo = 
    (s6het_p53null_Ribo-s6het_p53wt_Ribo)-(s6wt_p53null_Ribo-s6wt_p53wt_Ribo),
  levels = colnames(design_ribo))
contr.matrix_ribo

# Removing heteroscedascity from count data
tiff("sa_plot_ribo.tif", width=720, height=720)
par(mfrow=c(1,2))
v_ribo <- voom(expr_ribo, design_ribo, plot=TRUE)
v_ribo

vfit_ribo <- lmFit(v_ribo, design_ribo)
vfit_ribo <- contrasts.fit(vfit_ribo, contrasts=contr.matrix_ribo)
efit_ribo <- eBayes(vfit_ribo)
plotSA(efit_ribo, main="Final model: Meanâˆ’variance trend")
dev.off()

# Examine DE genes
dt_ribo <- decideTests(efit_ribo, p.value = p_cutoff_ribo)
sum_efit_ribo <- summary(dt_ribo)
write.csv(sum_efit_ribo, file="summary_fit_ribo.csv", row.names=TRUE)
write.fit(efit_ribo, dt_ribo, file="efit_results_ribo.txt", col.names=NA)

# Examine DE genes
# Group categories *** NEED TO CHANGE EACH TIME - HARDCODED ***
cont_vec_ribo <- colnames(efit_ribo$contrasts)

for(i in 1:length(cont_vec_ribo)){
  name <- cont_vec_ribo[i]
  res_table <- topTable(efit_ribo, coef=i, n=Inf)
  sig_vec <- 1*(res_table$adj.P.Val < p_cutoff_ribo)
  fc_vec <- 1*(res_table$logFC > 0) + -1*(res_table$logFC < 0)
  sig_fc_vec <- as.factor(sig_vec*fc_vec)
  res_table_sig <- topTable(efit_ribo, coef=i, n=Inf, p.value=p_cutoff_ribo)
  f_out_name <- paste("results", "_", name, ".csv", sep="")
  f_out_name_sig <- paste("results_sig", "_", name, ".csv", sep="")
  write.csv(res_table, file=f_out_name, row.names=TRUE)
  write.csv(res_table_sig, file=f_out_name_sig, row.names=TRUE)
  
  pval_plot_name <- paste("pval_hist", "_", name, ".jpeg", sep="")
  p <- ggplot(res_table, aes(x=P.Value)) + 
    geom_histogram() + 
    xlim(c(-0.1,1.1)) + 
    xlab("unadjusted p_value") + 
    theme_bw()
  ggsave(pval_plot_name, device="jpeg")
  
  tstat_plot_name <- paste("tstat_hist", "_", name, ".jpeg", sep="")
  p <- ggplot(res_table, aes(x=t)) + 
    geom_histogram(bins=100) + 
    xlab("t_stat") + 
    theme_bw()
  ggsave(tstat_plot_name, device="jpeg")
  
  # MA plots
  ma_plot_name <- paste("ma_plot", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  jpeg(ma_plot_name, width=720, height=720)
  plotMD(efit_ribo, column=i, status=dt_ribo[,i], main=colnames(efit_ribo)[i], h1.col=c(col[2], "black", col[1]))
  dev.off()
  
  html_folder <- paste("ma_plot", "_", name, sep="")
  html_file_name <- paste("ma_plot", "_", name, sep="")
  glMDPlot(efit_ribo, coef=i, status=dt_ribo, main=colnames(efit_ribo)[i],
           side.main="gene_ID", counts=v_ribo, transform=FALSE, groups=v_ribo$targets$genotype, 
           folder=html_folder, html=html_file_name, launch=FALSE)
  
  #Figure quality MA plot
  ma_plot_2_name <- paste("ma_plot_2", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_ribo[,i]$Amean, efit_ribo[,i]$coefficients, dt_ribo[,i])
  colnames(df_ma) <- c("Amean", "coefficients", "status")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.2, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3) +
    ylim(c(-10,10)) + 
    theme_bw() +
    theme(axis.text=element_text(size=18,face="bold"),
          axis.title=element_text(size=18,face="bold"))
  ggsave(ma_plot_2_name, device="jpeg")
  
  # Plot volcano
  volc_plot_name <- paste("volc_plot", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  p <- ggplot(res_table, aes(x=logFC, y=-log10(P.Value))) + 
    geom_point(aes(colour=sig_fc_vec), show.legend = FALSE, alpha=0.3) + 
    scale_colour_manual(values = c("-1"= col[2], "0"="black",  "1"= col[1])) + 
    labs(title = name) + 
    xlab("log2(FC)") + ylab("-log10(p-value)") + 
    theme_bw()
  ggsave(volc_plot_name, device="jpeg")
  
  html_folder <- paste("volc_plot", "_", name, sep="")
  html_file_name <- paste("volc_plot", "_", name, sep="")
  glXYPlot(x=efit_ribo[,i]$coefficients, y=-log10(efit_ribo[,i]$p.value), xlab="log2FC", ylab="neg_log10_pvalue",
           status=dt_ribo[,i], side.main="gene_ID", anno=efit_ribo$genes, main=colnames(efit_ribo)[i],
           counts=v_ribo, groups=v_ribo$targets$genotype, 
           folder=html_folder, html=html_file_name, launch=FALSE)
}

# I am now here: Useful graphical representations of differential expression results
# GSEA databases: http://software.broadinstitute.org/gsea/msigdb/collections.jsp
# This database has data for mouse: http://bioinf.wehi.edu.au/software/MSigDB/
# 20190519 I now use this database: http://download.baderlab.org/EM_Genesets/current_release/Mouse/Entrezgene/
# Get file with all GO terms (not just BP) Mouse_GO_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt
# and BP only Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt
# Follow this tutorial: https://baderlab.github.io/Cytoscape_workflows/EnrichmentMapPipeline/supplemental_protocol3_R_gse_methods.html
# Camera vs. mroast
# Other gene set tests are available in limma, 
# such as the self-contained tests by mroast (Wu et al. 2010). 
# Whilst camera is ideal for testing a large database of gene sets and 
# observing which of them rank highly relative to others (as shown above), 
# self-contained tests are better for focused testing of one or a few specifically 
# chosen sets to see if they are DE in their own right. 
# In other words, camera is more appropriate when â€˜fishingâ€™ for gene sets of interest, 
# whereas mroast tests sets that are already of interest for significance.

# Camera GSEA analysis
# Import rdata gene sets
# path <- "/Users/geraldctiu/Documents/workspace/20190516_Prx1Cre_RPS6_P53_Ribosome_Profiling_Analysis_v4/mouse_gene_sets"
# file.names <- dir(path, pattern=".gmt", full.names = TRUE)
# just_file.names <- dir(path, pattern=".gmt")

# Note just use GO biological processes
gmt_file <- "/Users/geraldctiu/Documents/workspace/20190516_Prx1Cre_RPS6_P53_Ribosome_Profiling_Analysis_v4/mouse_gene_sets/Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt"
gmt_file_name <- "Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene"

genesets <- GSA.read.gmt(gmt_file)
names(genesets$genesets) <- genesets$geneset.names

# Camera2 and ROAST1 require that the gene sets are filtered such that all genes in gene sets have expression values in the dataset. Use function in limma (ids2indices) to convert gene identifiers in the geneset to indices in the dataset.
genesets_filtered <- ids2indices(genesets$genesets,id=v_ribo$genes$entrez_id, remove.empty=TRUE)
# Filter the gene sets according to their size, following the previous step of filtering by availability of expression data. Here we only include sets with more than 10 and less than 500 genes.
geneset_sizes <- unlist(lapply(genesets_filtered, length))
geneset_indices <- which(geneset_sizes>=10 & geneset_sizes<500)

for(i in 1:length(cont_vec_ribo)){
  name <- cont_vec_ribo[i]
  camera_results_file <- paste("camera", "_", name, "_", gmt_file_name, ".txt", sep="")
  
  camera_results <- camera(v_ribo, 
                           genesets_filtered[geneset_indices], design_ribo, contrast=contr.matrix_ribo[,i])
  camera_descr <- unlist(lapply(rownames(camera_results), 
                                function(x){unlist(strsplit(x,"\\%"))[1]}))
  camera_Phenotype <- unlist(lapply(camera_results[,"Direction"], 
                                    function(x){if(x=="Up"){1}else{(-1)}}))
  
  camera_genes <- c()
  for(j in 1:length(rownames(camera_results))){
    current_geneset <- unlist( 
      genesets_filtered[ which( names( genesets_filtered ) %in% 
                                  rownames(camera_results)[j])])
    current_genes <- c()
    for(k in 1:length(current_geneset)){
      if(k==length(current_geneset)){
        current_genes <- paste( current_genes, 
                                v_ribo$genes$entrez_id[current_geneset[k]],
                                sep="")
      } else {
        current_genes <- paste( current_genes, 
                                v_ribo$genes$entrez_id[current_geneset[k]], ",", 
                                sep="")
      }
    }
    camera_genes <- rbind(camera_genes, current_genes)
  }
  rownames(camera_genes) <- rownames(camera_results)
  
  camera_results_generic_em <- data.frame(rownames(camera_results), camera_descr, 
                                          PValue = camera_results[,"PValue"], FDR=camera_results[,"FDR"], camera_Phenotype, camera_genes )
  
  write.table(camera_results_generic_em, camera_results_file, 
              col.name=TRUE, sep="\t", row.names=FALSE, quote=FALSE)
}



# RNA
# Create design matrix
# May want to include sex and/or replicate for batch variables
design_rna <- model.matrix(~0+geno_t_rna+repl_rna+sff_rna)
colnames(design_rna) <- gsub("geno_t_rna", "", colnames(design_rna))
design_rna

# Create contrast matrix
contr.matrix_rna <- makeContrasts(
  s6het_p53wt_RNA_vs_s6wt_p53wt_RNA = s6het_p53wt_RNA-s6wt_p53wt_RNA, 
  s6het_p53null_RNA_vs_s6wt_p53null_RNA = s6het_p53null_RNA-s6wt_p53null_RNA, 
  s6wt_p53null_RNA_vs_s6wt_p53wt_RNA = s6wt_p53null_RNA-s6wt_p53wt_RNA, 
  s6het_p53null_RNA_vs_s6het_p53wt_RNA = s6het_p53null_RNA-s6het_p53wt_RNA, 
  s6wt_p53wt_RNA_vs_s6wt_p53null_RNA = s6wt_p53wt_RNA-s6wt_p53null_RNA,
  s6het_p53wt_RNA_vs_s6het_p53null_RNA = s6het_p53wt_RNA-s6het_p53null_RNA, 
  s6het_p53null_RNA_vs_s6wt_p53wt_RNA = s6het_p53null_RNA-s6wt_p53wt_RNA,
  s6het_p53wt_RNA_vs_s6wt_p53null_RNA = s6het_p53wt_RNA-s6wt_p53null_RNA,
  s6het_p53wt_RNA_vs_s6wt_p53wt_RNA_minus_s6het_p53null_RNA_vs_s6wt_p53null_RNA = 
    (s6het_p53wt_RNA-s6wt_p53wt_RNA)-(s6het_p53null_RNA-s6wt_p53null_RNA),
  s6het_p53null_RNA_vs_s6het_p53wt_RNA_minus_s6wt_p53null_RNA_vs_s6wt_p53wt_RNA = 
    (s6het_p53null_RNA-s6het_p53wt_RNA)-(s6wt_p53null_RNA-s6wt_p53wt_RNA),
  levels = colnames(design_rna))
contr.matrix_rna

# Removing heteroscedascity from count data
tiff("sa_plot_rna.tif", width=720, height=720)
par(mfrow=c(1,2))
v_rna <- voom(expr_rna, design_rna, plot=TRUE)
v_rna

vfit_rna <- lmFit(v_rna, design_rna)
vfit_rna <- contrasts.fit(vfit_rna, contrasts=contr.matrix_rna)
efit_rna <- eBayes(vfit_rna)
plotSA(efit_rna, main="Final model: Meanâˆ’variance trend")
dev.off()

# Examine DE genes
dt_rna <- decideTests(efit_rna, p.value = p_cutoff_rna)
sum_efit_rna <- summary(dt_rna)
write.csv(sum_efit_rna, file="summary_fit_rna.csv", row.names=TRUE)
write.fit(efit_rna, dt_rna, file="efit_results_rna.txt", col.names=NA)

# Examine DE genes
# Group categories *** NEED TO CHANGE EACH TIME - HARDCODED ***
cont_vec_rna <- colnames(efit_rna$contrasts)

for(i in 1:length(cont_vec_rna)){
  name <- cont_vec_rna[i]
  res_table <- topTable(efit_rna, coef=i, n=Inf)
  sig_vec <- 1*(res_table$adj.P.Val < p_cutoff_rna)
  fc_vec <- 1*(res_table$logFC > 0) + -1*(res_table$logFC < 0)
  sig_fc_vec <- as.factor(sig_vec*fc_vec)
  res_table_sig <- topTable(efit_rna, coef=i, n=Inf, p.value=p_cutoff_rna)
  f_out_name <- paste("results", "_", name, ".csv", sep="")
  f_out_name_sig <- paste("results_sig", "_", name, ".csv", sep="")
  write.csv(res_table, file=f_out_name, row.names=TRUE)
  write.csv(res_table_sig, file=f_out_name_sig, row.names=TRUE)
  
  pval_plot_name <- paste("pval_hist", "_", name, ".jpeg", sep="")
  p <- ggplot(res_table, aes(x=P.Value)) + 
    geom_histogram() + 
    xlim(c(-0.1,1.1)) + 
    xlab("unadjusted p_value") + 
    theme_bw()
  ggsave(pval_plot_name, device="jpeg")
  
  tstat_plot_name <- paste("tstat_hist", "_", name, ".jpeg", sep="")
  p <- ggplot(res_table, aes(x=t)) + 
    geom_histogram(bins=100) + 
    xlab("t_stat") + 
    theme_bw()
  ggsave(tstat_plot_name, device="jpeg")
  
  # MA plots
  ma_plot_name <- paste("ma_plot", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  jpeg(ma_plot_name, width=720, height=720)
  plotMD(efit_rna, column=i, status=dt_rna[,i], main=colnames(efit_rna)[i], h1.col=c(col[2], "black", col[1]))
  dev.off()
  
  html_folder <- paste("ma_plot", "_", name, sep="")
  html_file_name <- paste("ma_plot", "_", name, sep="")
  glMDPlot(efit_rna, coef=i, status=dt_rna, main=colnames(efit_rna)[i],
           side.main="gene_ID", counts=v_rna, transform=FALSE, groups=v_rna$targets$genotype, 
           folder=html_folder, html=html_file_name, launch=FALSE)
  
  #Figure quality MA plot
  ma_plot_2_name <- paste("ma_plot_2", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_rna[,i]$Amean, efit_rna[,i]$coefficients, dt_rna[,i])
  colnames(df_ma) <- c("Amean", "coefficients", "status")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.2, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3) +
    ylim(c(-7.5,7.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=18,face="bold"),
          axis.title=element_text(size=18,face="bold"))
  ggsave(ma_plot_2_name, device="jpeg")
  
  # Plot volcano
  volc_plot_name <- paste("volc_plot", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  p <- ggplot(res_table, aes(x=logFC, y=-log10(P.Value))) + 
    geom_point(aes(colour=sig_fc_vec), show.legend = FALSE) + 
    scale_colour_manual(values = c("-1"= col[2], "0"="black",  "1"= col[1])) + 
    labs(title = name) + 
    xlab("log2(FC)") + ylab("-log10(p-value)") + 
    theme_bw()
  ggsave(volc_plot_name, device="jpeg")
  
  html_folder <- paste("volc_plot", "_", name, sep="")
  html_file_name <- paste("volc_plot", "_", name, sep="")
  glXYPlot(x=efit_rna[,i]$coefficients, y=-log10(efit_rna[,i]$p.value), xlab="log2FC", ylab="neg_log10_pvalue",
           status=dt_rna[,i], side.main="gene_ID", anno=efit_rna$genes, main=colnames(efit_rna)[i],
           counts=v_rna, groups=v_rna$targets$genotype, 
           folder=html_folder, html=html_file_name, launch=FALSE)
}


# I am now here: Useful graphical representations of differential expression results
# GSEA databases: http://software.broadinstitute.org/gsea/msigdb/collections.jsp
# This database has data for mouse: http://bioinf.wehi.edu.au/software/MSigDB/
# 20190519 I now use this database: http://download.baderlab.org/EM_Genesets/current_release/Mouse/Entrezgene/
# Get file with all GO terms (not just BP) Mouse_GO_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt
# and BP only Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt
# Follow this tutorial: https://baderlab.github.io/Cytoscape_workflows/EnrichmentMapPipeline/supplemental_protocol3_R_gse_methods.html
# Camera vs. mroast
# Other gene set tests are available in limma, 
# such as the self-contained tests by mroast (Wu et al. 2010). 
# Whilst camera is ideal for testing a large database of gene sets and 
# observing which of them rank highly relative to others (as shown above), 
# self-contained tests are better for focused testing of one or a few specifically 
# chosen sets to see if they are DE in their own right. 
# In other words, camera is more appropriate when â€˜fishingâ€™ for gene sets of interest, 
# whereas mroast tests sets that are already of interest for significance.

# Camera GSEA analysis
# Import rdata gene sets
# path <- "/Users/geraldctiu/Documents/workspace/20190516_Prx1Cre_RPS6_P53_Ribosome_Profiling_Analysis_v4/mouse_gene_sets"
# file.names <- dir(path, pattern=".gmt", full.names = TRUE)
# just_file.names <- dir(path, pattern=".gmt")

# Note just use GO biological processes
gmt_file <- "/Users/geraldctiu/Documents/workspace/20190516_Prx1Cre_RPS6_P53_Ribosome_Profiling_Analysis_v4/mouse_gene_sets/Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt"
gmt_file_name <- "Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene"

genesets <- GSA.read.gmt(gmt_file)
names(genesets$genesets) <- genesets$geneset.names

# Camera2 and ROAST1 require that the gene sets are filtered such that all genes in gene sets have expression values in the dataset. Use function in limma (ids2indices) to convert gene identifiers in the geneset to indices in the dataset.
genesets_filtered <- ids2indices(genesets$genesets,id=v_rna$genes$entrez_id, remove.empty=TRUE)
# Filter the gene sets according to their size, following the previous step of filtering by availability of expression data. Here we only include sets with more than 10 and less than 500 genes.
geneset_sizes <- unlist(lapply(genesets_filtered, length))
geneset_indices <- which(geneset_sizes>=10 & geneset_sizes<500)

for(i in 1:length(cont_vec_rna)){
  name <- cont_vec_rna[i]
  camera_results_file <- paste("camera", "_", name, "_", gmt_file_name, ".txt", sep="")
  
  camera_results <- camera(v_rna, 
                           genesets_filtered[geneset_indices], design_rna, contrast=contr.matrix_rna[,i])
  camera_descr <- unlist(lapply(rownames(camera_results), 
                                function(x){unlist(strsplit(x,"\\%"))[1]}))
  camera_Phenotype <- unlist(lapply(camera_results[,"Direction"], 
                                    function(x){if(x=="Up"){1}else{(-1)}}))
  
  camera_genes <- c()
  for(j in 1:length(rownames(camera_results))){
    current_geneset <- unlist( 
      genesets_filtered[ which( names( genesets_filtered ) %in% 
                                  rownames(camera_results)[j])])
    current_genes <- c()
    for(k in 1:length(current_geneset)){
      if(k==length(current_geneset)){
        current_genes <- paste( current_genes, 
                                v_rna$genes$entrez_id[current_geneset[k]],
                                sep="")
      } else {
        current_genes <- paste( current_genes, 
                                v_rna$genes$entrez_id[current_geneset[k]], ",", 
                                sep="")
      }
    }
    camera_genes <- rbind(camera_genes, current_genes)
  }
  rownames(camera_genes) <- rownames(camera_results)
  
  camera_results_generic_em <- data.frame(rownames(camera_results), camera_descr, 
                                          PValue = camera_results[,"PValue"], FDR=camera_results[,"FDR"], camera_Phenotype, camera_genes )
  
  write.table(camera_results_generic_em, camera_results_file, 
              col.name=TRUE, sep="\t", row.names=FALSE, quote=FALSE)
}

# TE
# Create design matrix
# May want to include sex and/or replicate for batch variables
design_te <- model.matrix(~0+geno_t_te+repl_te+sff_te)
colnames(design_te) <- gsub("geno_t_te", "", colnames(design_te))
design_te

# Create contrast matrix
contr.matrix_te <- makeContrasts(
  s6het_p53wt_TE_vs_s6wt_p53wt_TE = 
    (s6het_p53wt_Ribo-s6het_p53wt_RNA)-(s6wt_p53wt_Ribo-s6wt_p53wt_RNA), 
  s6het_p53null_TE_vs_s6wt_p53null_TE = 
    (s6het_p53null_Ribo-s6het_p53null_RNA)-(s6wt_p53null_Ribo-s6wt_p53null_RNA), 
  s6wt_p53null_TE_vs_s6wt_p53wt_TE = 
    (s6wt_p53null_Ribo-s6wt_p53null_RNA)-(s6wt_p53wt_Ribo-s6wt_p53wt_RNA), 
  s6het_p53null_TE_vs_s6het_p53wt_TE = 
    (s6het_p53null_Ribo-s6het_p53null_RNA)-(s6het_p53wt_Ribo-s6het_p53wt_RNA), 
  s6wt_p53wt_TE_vs_s6wt_p53null_TE = 
    (s6wt_p53wt_Ribo-s6wt_p53wt_RNA)-(s6wt_p53null_Ribo-s6wt_p53null_RNA), 
  s6het_p53wt_TE_vs_s6het_p53null_TE = 
    (s6het_p53wt_Ribo-s6het_p53wt_RNA)-(s6het_p53null_Ribo-s6het_p53null_RNA), 
  s6het_p53null_TE_vs_s6wt_p53wt_TE = 
    (s6het_p53null_Ribo-s6het_p53null_RNA)-(s6wt_p53wt_Ribo-s6wt_p53wt_RNA),
  s6het_p53wt_TE_vs_s6wt_p53null_TE = 
    (s6het_p53wt_Ribo-s6het_p53wt_RNA)-(s6wt_p53null_Ribo-s6wt_p53null_RNA),
  s6het_p53wt_TE_vs_s6wt_p53wt_TE_minus_s6het_p53null_TE_vs_s6wt_p53null_TE = 
    ((s6het_p53wt_Ribo-s6het_p53wt_RNA)-(s6wt_p53wt_Ribo-s6wt_p53wt_RNA))-
    ((s6het_p53null_Ribo-s6het_p53null_RNA)-(s6wt_p53null_Ribo-s6wt_p53null_RNA)),
  s6het_p53null_TE_vs_s6het_p53wt_TE_minus_s6wt_p53null_TE_vs_s6wt_p53wt_TE = 
    ((s6het_p53null_Ribo-s6het_p53null_RNA)-(s6het_p53wt_Ribo-s6het_p53wt_RNA))-
    ((s6wt_p53null_Ribo-s6wt_p53null_RNA)-(s6wt_p53wt_Ribo-s6wt_p53wt_RNA)),
  levels = colnames(design_te))
contr.matrix_te

# Removing heteroscedascity from count data
tiff("sa_plot_te.tif", width=720, height=720)
par(mfrow=c(1,2))
v_te <- voom(expr_te, design_te, plot=TRUE)
v_te

vfit_te <- lmFit(v_te, design_te)
vfit_te <- contrasts.fit(vfit_te, contrasts=contr.matrix_te)
efit_te <- eBayes(vfit_te)
plotSA(efit_te, main="Final model: Meanâˆ’variance trend")
dev.off()

# Examine DE genes
dt_te <- decideTests(efit_te, p.value = p_cutoff_te)
sum_efit_te <- summary(dt_te)
write.csv(sum_efit_te, file="summary_fit_te.csv", row.names=TRUE)
write.fit(efit_te, dt_te, file="efit_results_te.txt", col.names=NA)

# Examine DE genes
# Group categories *** NEED TO CHANGE EACH TIME - HARDCODED ***
cont_vec_te <- colnames(efit_te$contrasts)

for(i in 1:length(cont_vec_te)){
  name <- cont_vec_te[i]
  res_table <- topTable(efit_te, coef=i, n=Inf)
  sig_vec <- 1*(res_table$adj.P.Val < p_cutoff_te)
  fc_vec <- 1*(res_table$logFC > 0) + -1*(res_table$logFC < 0)
  sig_fc_vec <- as.factor(sig_vec*fc_vec)
  res_table_sig <- topTable(efit_te, coef=i, n=Inf, p.value=p_cutoff_te)
  f_out_name <- paste("results", "_", name, ".csv", sep="")
  f_out_name_sig <- paste("results_sig", "_", name, ".csv", sep="")
  write.csv(res_table, file=f_out_name, row.names=TRUE)
  write.csv(res_table_sig, file=f_out_name_sig, row.names=TRUE)
  
  pval_plot_name <- paste("pval_hist", "_", name, ".jpeg", sep="")
  p <- ggplot(res_table, aes(x=P.Value)) + 
    geom_histogram() + 
    xlim(c(-0.1,1.1)) + 
    xlab("unadjusted p_value") + 
    theme_bw()
  ggsave(pval_plot_name, device="jpeg")
  
  tstat_plot_name <- paste("tstat_hist", "_", name, ".jpeg", sep="")
  p <- ggplot(res_table, aes(x=t)) + 
    geom_histogram(bins=100) + 
    xlab("t_stat") + 
    theme_bw()
  ggsave(tstat_plot_name, device="jpeg")
  
  # MA plots
  ma_plot_name <- paste("ma_plot", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  jpeg(ma_plot_name, width=720, height=720)
  plotMD(efit_te, column=i, status=dt_te[,i], main=colnames(efit_te)[i], h1.col=c(col[2], "black", col[1]))
  dev.off()
  
  html_folder <- paste("ma_plot", "_", name, sep="")
  html_file_name <- paste("ma_plot", "_", name, sep="")
  glMDPlot(efit_te, coef=i, status=dt_te, main=colnames(efit_te)[i],
           side.main="gene_ID", counts=v_te, transform=FALSE, groups=v_te$targets$genotype, 
           folder=html_folder, html=html_file_name, launch=FALSE)
  
  #Figure quality MA plot
  ma_plot_2_name <- paste("ma_plot_2", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_te[,i]$Amean, efit_te[,i]$coefficients, dt_te[,i])
  colnames(df_ma) <- c("Amean", "coefficients", "status")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.2, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3) +
    ylim(c(-2.5,2.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=18,face="bold"),
          axis.title=element_text(size=18,face="bold"))
  ggsave(ma_plot_2_name, device="jpeg")
  
  # Figure quality MA plot with labels of gene names (Sox9, Col2a1)
  ma_plot_3_name <- paste("ma_plot_3", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_te[,i]$genes$geneSymbol, efit_te[,i]$Amean, efit_te[,i]$coefficients, dt_te[,i])
  colnames(df_ma) <- c("geneSymbol", "Amean", "coefficients", "status")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.2, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3) +
    geom_text_repel(data=subset(df_ma, geneSymbol == "Col2a1"), aes(x=Amean, y=coefficients, label=geneSymbol), size = 6, point.padding = NA) + 
    geom_text_repel(data=subset(df_ma, geneSymbol == "Sox9"), aes(x=Amean, y=coefficients, label=geneSymbol), size = 6, point.padding = NA) + 
    ylim(c(-2.5,2.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=18,face="bold"),
          axis.title=element_text(size=18,face="bold"))
  ggsave(ma_plot_3_name, device="jpeg")
  
  # Figure quality MA plot with labels of gene names (Sox9, Col2a1)
  ma_plot_4_name <- paste("ma_plot_4", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_te[,i]$genes$geneSymbol, efit_te[,i]$Amean, efit_te[,i]$coefficients, dt_te[,i])
  colnames(df_ma) <- c("geneSymbol", "Amean", "coefficients", "status")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.2, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3) +
    geom_text_repel(data=subset(df_ma, geneSymbol == "Ifrd1"), aes(x=Amean, y=coefficients, label=geneSymbol), size = 6, point.padding = NA) + 
    geom_text_repel(data=subset(df_ma, geneSymbol == "Mdm4"), aes(x=Amean, y=coefficients, label=geneSymbol), size = 6, point.padding = NA) + 
    geom_text_repel(data=subset(df_ma, geneSymbol == "Rnf10"), aes(x=Amean, y=coefficients, label=geneSymbol), size = 6, point.padding = NA) + 
    ylim(c(-2.5,2.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=18,face="bold"),
          axis.title=element_text(size=18,face="bold"))
  ggsave(ma_plot_4_name, device="jpeg")
  
  # Plot volcano
  volc_plot_name <- paste("volc_plot", "_", name, ".jpeg", sep="")
  col <- brewer.pal(3, "Set1")
  p <- ggplot(res_table, aes(x=logFC, y=-log10(P.Value))) + 
    geom_point(aes(colour=sig_fc_vec), show.legend = FALSE) + 
    scale_colour_manual(values = c("-1"= col[2], "0"="black",  "1"= col[1])) + 
    labs(title = name) + 
    xlab("log2(FC)") + ylab("-log10(p-value)") + 
    theme_bw()
  ggsave(volc_plot_name, device="jpeg")
  
  html_folder <- paste("volc_plot", "_", name, sep="")
  html_file_name <- paste("volc_plot", "_", name, sep="")
  glXYPlot(x=efit_te[,i]$coefficients, y=-log10(efit_te[,i]$p.value), xlab="log2FC", ylab="neg_log10_pvalue",
           status=dt_te[,i], side.main="gene_ID", anno=efit_te$genes, main=colnames(efit_te)[i],
           counts=v_te, groups=v_te$targets$genotype, 
           folder=html_folder, html=html_file_name, launch=FALSE)
}

# I am now here: Useful graphical representations of differential expression results
# GSEA databases: http://software.broadinstitute.org/gsea/msigdb/collections.jsp
# This database has data for mouse: http://bioinf.wehi.edu.au/software/MSigDB/
# 20190519 I now use this database: http://download.baderlab.org/EM_Genesets/current_release/Mouse/Entrezgene/
# Get file with all GO terms (not just BP) Mouse_GO_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt
# and BP only Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt
# Follow this tutorial: https://baderlab.github.io/Cytoscape_workflows/EnrichmentMapPipeline/supplemental_protocol3_R_gse_methods.html
# Camera vs. mroast
# Other gene set tests are available in limma, 
# such as the self-contained tests by mroast (Wu et al. 2010). 
# Whilst camera is ideal for testing a large database of gene sets and 
# observing which of them rank highly relative to others (as shown above), 
# self-contained tests are better for focused testing of one or a few specifically 
# chosen sets to see if they are DE in their own right. 
# In other words, camera is more appropriate when â€˜fishingâ€™ for gene sets of interest, 
# whereas mroast tests sets that are already of interest for significance.

# Camera GSEA analysis
# Import rdata gene sets
# path <- "/Users/geraldctiu/Documents/workspace/20190516_Prx1Cre_RPS6_P53_Ribosome_Profiling_Analysis_v4/mouse_gene_sets"
# file.names <- dir(path, pattern=".gmt", full.names = TRUE)
# just_file.names <- dir(path, pattern=".gmt")

# Note just use GO biological processes
gmt_file <- "/Users/geraldctiu/Documents/workspace/20190516_Prx1Cre_RPS6_P53_Ribosome_Profiling_Analysis_v4/mouse_gene_sets/Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene.gmt"
gmt_file_name <- "Mouse_GOBP_AllPathways_no_GO_iea_April_01_2019_entrezgene"

genesets <- GSA.read.gmt(gmt_file)
names(genesets$genesets) <- genesets$geneset.names

# Camera2 and ROAST1 require that the gene sets are filtered such that all genes in gene sets have expression values in the dataset. Use function in limma (ids2indices) to convert gene identifiers in the geneset to indices in the dataset.
genesets_filtered <- ids2indices(genesets$genesets,id=v_te$genes$entrez_id, remove.empty=TRUE)
# Filter the gene sets according to their size, following the previous step of filtering by availability of expression data. Here we only include sets with more than 10 and less than 500 genes.
geneset_sizes <- unlist(lapply(genesets_filtered, length))
geneset_indices <- which(geneset_sizes>=10 & geneset_sizes<500)

for(i in 1:length(cont_vec_te)){
  name <- cont_vec_te[i]
  camera_results_file <- paste("camera", "_", name, "_", gmt_file_name, ".txt", sep="")
  
  camera_results <- camera(v_te, 
                           genesets_filtered[geneset_indices], design_te, contrast=contr.matrix_te[,i])
  camera_descr <- unlist(lapply(rownames(camera_results), 
                                function(x){unlist(strsplit(x,"\\%"))[1]}))
  camera_Phenotype <- unlist(lapply(camera_results[,"Direction"], 
                                    function(x){if(x=="Up"){1}else{(-1)}}))
  
  camera_genes <- c()
  for(j in 1:length(rownames(camera_results))){
    current_geneset <- unlist( 
      genesets_filtered[ which( names( genesets_filtered ) %in% 
                                  rownames(camera_results)[j])])
    current_genes <- c()
    for(k in 1:length(current_geneset)){
      if(k==length(current_geneset)){
        current_genes <- paste( current_genes, 
                                v_te$genes$entrez_id[current_geneset[k]],
                                sep="")
      } else {
        current_genes <- paste( current_genes, 
                                v_te$genes$entrez_id[current_geneset[k]], ",", 
                                sep="")
      }
    }
    camera_genes <- rbind(camera_genes, current_genes)
  }
  rownames(camera_genes) <- rownames(camera_results)
  
  camera_results_generic_em <- data.frame(rownames(camera_results), camera_descr, 
                                          PValue = camera_results[,"PValue"], FDR=camera_results[,"FDR"], camera_Phenotype, camera_genes )
  
  write.table(camera_results_generic_em, camera_results_file, 
              col.name=TRUE, sep="\t", row.names=FALSE, quote=FALSE)
}

# Plot delta Ribo vs. RNA
for(i in 1:length(cont_vec_rna)){
  name1 <- cont_vec_rna[i]
  name2 <- cont_vec_ribo[i]
  title <- paste(name1, "against", name2, sep="_")
  
  # 0 no change
  # 1 change in RNA
  # 2 change in Ribo
  # 3 change in both
  dt2 <- rep(0, nrow(dt_rna))
  dt2[dt_rna[,i]!=0] <- 1
  dt2[dt_ribo[,i]!=0] <- 2
  dt2[(dt_rna[,i]!=0) & (dt_ribo[,i]!=0)] <- 3
  table(dt2)
  dt2 <- data.frame(dt2)
  dt2[,1] <- as.factor(dt2[,1])
  rownames(dt2) <- efit_rna$genes$gene_ID
  
  coef1 <- paste("coef", name1, sep="_")
  coef2 <- paste("coef", name2, sep="_")
  pval1 <- paste("pval", name1, sep="_")
  pval2 <- paste("pval", name2, sep="_")
  dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, coef2, pval1, pval2, "status")
  dt_output <- data.frame(efit_rna$genes$gene_ID, efit_rna$genes$geneSymbol, 
                          efit_rna[,i]$coefficients, efit_ribo[,i]$coefficients, 
                          efit_rna[,i]$p.value, efit_ribo[,i]$p.value,
                          dt2[,1])
  colnames(dt_output) <- dt_output_col_names
  f_out_name <- paste("table_ribo_vs_rna", "_", name1, "_", name2, ".csv", sep="")
  write.csv(dt_output, file=f_out_name, row.names=FALSE)
  
  col <- brewer.pal(4, "Set1")
  cols <- c("grey", col[2], col[1], col[4])
  cols <- cols[1:nlevels(dt2[,1])]
  
  #Figure quality scatter plot with labels
  scatter_plot_2_name <- paste("scatter_2_ribo_vs_rna", "_", title, ".jpeg", sep="")
  e_subset <- data.frame(efit_rna[,i]$coefficients, efit_ribo[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
  colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
  p <- ggplot(e_subset) + 
    geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") + 
    geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) + 
    geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
    geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
    # xlim(c(-4,4)) + 
    # ylim(c(-2.5,2.5)) +
    labs(title = title) + 
    xlab(name1) + ylab(name2) + 
    theme_bw() +
    theme(axis.text=element_text(size=16,face="bold"),
          axis.title=element_text(size=8,face="bold"))
  ggsave(scatter_plot_2_name, device="jpeg")
  
  # #Figure quality scatter plot with labels
  # scatter_plot_3_name <- paste("scatter_3_ribo_vs_rna", "_", title, ".jpeg", sep="")
  # e_subset <- data.frame(efit_rna[,i]$coefficients, efit_ribo[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
  # colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
  # p <- ggplot(e_subset) + 
  #   geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") + 
  #   geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) + 
  #   geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
  #   geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
  #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
  #   geom_text_repel(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
  #   geom_text_repel(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
  #   # xlim(c(-4,4)) + 
  #   # ylim(c(-2.5,2.5)) +
  #   labs(title = title) + 
  #   xlab(name1) + ylab(name2) + 
  #   theme_bw() +
  #   theme(axis.text=element_text(size=16,face="bold"),
  #         axis.title=element_text(size=8,face="bold"))
  # ggsave(scatter_plot_3_name, device="jpeg")
  
  html_folder <- paste("scatter_ribo_vs_rna", "_", title, sep="")
  html_file_name <- paste("scatter_ribo_vs_rna", "_", title, sep="")
#   glXYPlot(x=efit_rna[,i]$coefficients, y=efit_ribo[,i]$coefficients, xlab=name1, ylab=name2, 
#            status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_rna$genes, main=title,
#            folder=html_folder, html=html_file_name, launch=FALSE)
  
  glXYPlot(x=efit_rna[,i]$coefficients, y=efit_ribo[,i]$coefficients, xlab=name1, ylab=name2, 
           status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_rna$genes, main=title,
           counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
}


# Plot RNA vs. RNA changes
for(i in 1:length(cont_vec_rna)){
  for(j in i:length(cont_vec_rna)){
    name1 <- cont_vec_rna[i]
    name2 <- cont_vec_rna[j]
    title <- paste(name1, "against", name2, sep="_")
    
    # 0 no change
    # 1 change in RNA1
    # 2 change in RNA2
    # 3 change in both
    dt2 <- rep(0, nrow(dt_rna))
    dt2[dt_rna[,i]!=0] <- 1
    dt2[dt_rna[,j]!=0] <- 2
    dt2[(dt_rna[,i]!=0) & (dt_rna[,j]!=0)] <- 3
    table(dt2)
    dt2 <- data.frame(dt2)
    dt2[,1] <- as.factor(dt2[,1])
    rownames(dt2) <- efit_rna$genes$gene_ID
    
    coef1 <- paste("coef", name1, sep="_")
    coef2 <- paste("coef", name2, sep="_")
    pval1 <- paste("pval", name1, sep="_")
    pval2 <- paste("pval", name2, sep="_")
    dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, coef2, pval1, pval2, "status")
    dt_output <- data.frame(efit_rna$genes$gene_ID, efit_rna$genes$geneSymbol, 
                            efit_rna[,i]$coefficients, efit_rna[,j]$coefficients, 
                            efit_rna[,i]$p.value, efit_rna[,j]$p.value,
                            dt2[,1])
    colnames(dt_output) <- dt_output_col_names
    f_out_name <- paste("table_RNA_vs_RNA", "_", name1, "_", name2, ".csv", sep="")
    write.csv(dt_output, file=f_out_name, row.names=FALSE)
    
    col <- brewer.pal(4, "Set1")
    cols <- c("grey", col[2], col[1], col[4])
    cols <- cols[1:nlevels(dt2[,1])]
    
    #Figure quality scatter plot with labels
    scatter_plot_2_name <- paste("scatter_2_RNA_vs_RNA", "_", title, ".jpeg", sep="")
    e_subset <- data.frame(efit_rna[,i]$coefficients, efit_rna[,j]$coefficients, dt2[,1], efit_rna[,i]$genes$geneSymbol)
    colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
    p <- ggplot(e_subset) + 
      geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") + 
      geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) + 
      geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
      geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
      # xlim(c(-4,4)) + 
      # ylim(c(-2.5,2.5)) +
      labs(title = title) + 
      xlab(name1) + ylab(name2) + 
      theme_bw() +
      theme(axis.text=element_text(size=16,face="bold"),
            axis.title=element_text(size=8,face="bold"))
    ggsave(scatter_plot_2_name, device="jpeg")
    
    # #Figure quality scatter plot with labels
    # scatter_plot_3_name <- paste("scatter_3_RNA_vs_RNA", "_", title, ".jpeg", sep="")
    # e_subset <- data.frame(efit_rna[,i]$coefficients, efit_rna[,j]$coefficients, dt2[,1], efit_rna[,i]$genes$geneSymbol)
    # colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
    # p <- ggplot(e_subset) + 
    #   geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") + 
    #   geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) + 
    #   geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
    #   geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
    #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
    #   geom_text_repel(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
    #   geom_text_repel(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
    #   # xlim(c(-4,4)) + 
    #   # ylim(c(-2.5,2.5)) +
    #   labs(title = title) + 
    #   xlab(name1) + ylab(name2) + 
    #   theme_bw() +
    #   theme(axis.text=element_text(size=16,face="bold"),
    #         axis.title=element_text(size=8,face="bold"))
    # ggsave(scatter_plot_3_name, device="jpeg")
    
    html_folder <- paste("scatter_RNA_vs_RNA", "_", title, sep="")
    html_file_name <- paste("scatter_RNA_vs_RNA", "_", title, sep="")
    glXYPlot(x=efit_rna[,i]$coefficients, y=efit_rna[,j]$coefficients, xlab=name1, ylab=name2, 
             status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_rna$genes, main=title,
             counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
  }
}

# Plot Ribo vs. Ribo changes
for(i in 1:length(cont_vec_ribo)){
  for(j in i:length(cont_vec_ribo)){
    name1 <- cont_vec_ribo[i]
    name2 <- cont_vec_ribo[j]
    title <- paste(name1, "against", name2, sep="_")
    
    # 0 no change
    # 1 change in Ribo1
    # 2 change in Ribo2
    # 3 change in both
    dt2 <- rep(0, nrow(dt_ribo))
    dt2[dt_ribo[,i]!=0] <- 1
    dt2[dt_ribo[,j]!=0] <- 2
    dt2[(dt_ribo[,i]!=0) & (dt_ribo[,j]!=0)] <- 3
    table(dt2)
    dt2 <- data.frame(dt2)
    dt2[,1] <- as.factor(dt2[,1])
    rownames(dt2) <- efit_ribo$genes$gene_ID
    
    coef1 <- paste("coef", name1, sep="_")
    coef2 <- paste("coef", name2, sep="_")
    pval1 <- paste("pval", name1, sep="_")
    pval2 <- paste("pval", name2, sep="_")
    dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, coef2, pval1, pval2, "status")
    dt_output <- data.frame(efit_ribo$genes$gene_ID, efit_ribo$genes$geneSymbol, 
                            efit_ribo[,i]$coefficients, efit_ribo[,j]$coefficients, 
                            efit_ribo[,i]$p.value, efit_ribo[,j]$p.value,
                            dt2[,1])
    colnames(dt_output) <- dt_output_col_names
    f_out_name <- paste("table_Ribo_vs_Ribo", "_", name1, "_", name2, ".csv", sep="")
    write.csv(dt_output, file=f_out_name, row.names=FALSE)
    
    col <- brewer.pal(4, "Set1")
    cols <- c("grey", col[2], col[1], col[4])
    cols <- cols[1:nlevels(dt2[,1])]
    
    #Figure quality scatter plot with labels
    scatter_plot_2_name <- paste("scatter_2_Ribo_vs_Ribo", "_", title, ".jpeg", sep="")
    e_subset <- data.frame(efit_ribo[,i]$coefficients, efit_ribo[,j]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
    colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
    p <- ggplot(e_subset) + 
      geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") + 
      geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) + 
      geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
      geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
      # xlim(c(-4,4)) + 
      # ylim(c(-2.5,2.5)) +
      labs(title = title) + 
      xlab(name1) + ylab(name2) + 
      theme_bw() +
      theme(axis.text=element_text(size=16,face="bold"),
            axis.title=element_text(size=8,face="bold"))
    ggsave(scatter_plot_2_name, device="jpeg")
    
    # #Figure quality scatter plot with labels
    # scatter_plot_3_name <- paste("scatter_3_Ribo_vs_Ribo", "_", title, ".jpeg", sep="")
    # e_subset <- data.frame(efit_ribo[,i]$coefficients, efit_ribo[,j]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
    # colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
    # p <- ggplot(e_subset) + 
    #   geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") + 
    #   geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) + 
    #   geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
    #   geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
    #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
    #   geom_text_repel(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
    #   geom_text_repel(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) + 
    #   # xlim(c(-4,4)) + 
    #   # ylim(c(-2.5,2.5)) +
    #   labs(title = title) + 
    #   xlab(name1) + ylab(name2) + 
    #   theme_bw() +
    #   theme(axis.text=element_text(size=16,face="bold"),
    #         axis.title=element_text(size=8,face="bold"))
    # ggsave(scatter_plot_3_name, device="jpeg")
    
    html_folder <- paste("scatter_Ribo_vs_Ribo", "_", title, sep="")
    html_file_name <- paste("scatter_Ribo_vs_Ribo", "_", title, sep="")
    glXYPlot(x=efit_ribo[,i]$coefficients, y=efit_ribo[,j]$coefficients, xlab=name1, ylab=name2, 
             status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_ribo$genes, main=title,
             counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
  }
}


# Plot TE vs. TE changes
for(i in 1:length(cont_vec_te)){
  for(j in i:length(cont_vec_te)){
    name1 <- cont_vec_te[i]
    name2 <- cont_vec_te[j]
    title <- paste(name1, "against", name2, sep="_")
    
    # 0 no change
    # 1 change in TE1
    # 2 change in TE2
    # 3 change in both
    dt2 <- rep(0, nrow(dt_te))
    dt2[dt_te[,i]!=0] <- 1
    dt2[dt_te[,j]!=0] <- 2
    dt2[(dt_te[,i]!=0) & (dt_te[,j]!=0)] <- 3
    table(dt2)
    dt2 <- data.frame(dt2)
    dt2[,1] <- as.factor(dt2[,1])
    rownames(dt2) <- efit_te$genes$gene_ID
    
    coef1 <- paste("coef", name1, sep="_")
    coef2 <- paste("coef", name2, sep="_")
    pval1 <- paste("pval", name1, sep="_")
    pval2 <- paste("pval", name2, sep="_")
    dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, coef2, pval1, pval2, "status")
    dt_output <- data.frame(efit_te$genes$gene_ID, efit_te$genes$geneSymbol, 
                            efit_te[,i]$coefficients, efit_te[,j]$coefficients, 
                            efit_te[,i]$p.value, efit_te[,j]$p.value,
                            dt2[,1])
    colnames(dt_output) <- dt_output_col_names
    f_out_name <- paste("table_TE_vs_TE", "_", name1, "_", name2, ".csv", sep="")
    write.csv(dt_output, file=f_out_name, row.names=FALSE)
    
    col <- brewer.pal(4, "Set1")
    cols <- c("grey", col[2], col[1], col[4])
    cols <- cols[1:nlevels(dt2[,1])]
    
    #Figure quality scatter plot with labels
    scatter_plot_2_name <- paste("scatter_2_TE_vs_TE", "_", title, ".jpeg", sep="")
    e_subset <- data.frame(efit_te[,i]$coefficients, efit_te[,j]$coefficients, dt2[,1], efit_te[,i]$genes$geneSymbol)
    colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
    p <- ggplot(e_subset) + 
      geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") + 
      geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) + 
      geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
      geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
      # xlim(c(-2.5,2.5)) +
      # ylim(c(-2.5,2.5)) +
      # xlim(c(-1, 0)) +
      # ylim(c(-1, 0)) +
      labs(title = title) + 
      xlab(name1) + ylab(name2) + 
      theme_bw() +
      theme(axis.text=element_text(size=16,face="bold"),
            axis.title=element_text(size=8,face="bold"))
    ggsave(scatter_plot_2_name, device="jpeg")
    
    # #Figure quality scatter plot with labels
    scatter_plot_3_name <- paste("scatter_3_TE_vs_TE", "_", title, ".jpeg", sep="")
    e_subset <- data.frame(efit_te[,i]$coefficients, efit_te[,j]$coefficients, dt2[,1], efit_te[,i]$genes$geneSymbol)
    colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
    p <- ggplot(e_subset) +
      geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") +
      geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) +
      geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
      geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
      # geom_text_repel(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) +
      # geom_text_repel(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) +
      # geom_text_repel(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) +
      geom_text_repel(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2, label=geneSymbol)) +
      # xlim(c(-2.5,2.5)) +
      # ylim(c(-2.5,2.5)) +
      # xlim(c(-1, 0)) +
      # ylim(c(-1, 0)) +
      labs(title = title) +
      xlab(name1) + ylab(name2) +
      theme_bw() +
      theme(axis.text=element_text(size=16,face="bold"),
            axis.title=element_text(size=8,face="bold"))
    ggsave(scatter_plot_3_name, device="jpeg")
    
    html_folder <- paste("scatter_TE_vs_TE", "_", title, sep="")
    html_file_name <- paste("scatter_TE_vs_TE", "_", title, sep="")
    glXYPlot(x=efit_te[,i]$coefficients, y=efit_te[,j]$coefficients, xlab=name1, ylab=name2, 
             status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_te$genes, main=title,
             counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
  }
}

# Get subset of contrasts I care about
# For all 4 contrasts
# For old set: p53null - p53wt
# ind_subset <- c(1:4)
# fact_reorder_ind <- c(1, 2, 3, 4)
# For new set p53wt - p53null 
ind_subset <- c(1, 2, 3, 4, 5, 6)
fact_reorder_ind <- c(1, 2, 3, 4, 5, 6)
# If just care about S6 comparison
# ind_subset <- c(1,2)
# fact_reorder_ind <- c(2,1)
# If just care about p53 comparison
# ind_subset <- c(3,4)
# fact_reorder_ind <- c(3,4)

efit_ribo_subset <- efit_ribo[,fact_reorder_ind]
efit_rna_subset <- efit_rna[,fact_reorder_ind]
efit_te_subset <- efit_te[,fact_reorder_ind]


# Make violin plot for ribosomal proteins
# Make column is ribosomal protein

df_rp <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/ribosomal_protein_list_geneSymbol_20190606.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
colnames(df_rp) <- c("geneSymbol")
list_rp <- df_rp$geneSymbol

expr$genes$is_rp <- expr$genes$geneSymbol %in% list_rp
expr_ribo$genes$is_rp <- expr_ribo$genes$geneSymbol %in% list_rp
expr_rna$genes$is_rp <- expr_rna$genes$geneSymbol %in% list_rp
expr_te$genes$is_rp <- expr_te$genes$geneSymbol %in% list_rp

df_expr_is_rp <- data.frame(expr$genes$is_rp)
colnames(df_expr_is_rp) <- "is_rp"
df_expr_ribo_is_rp <- data.frame(expr_ribo$genes$is_rp)
colnames(df_expr_ribo_is_rp) <- "is_rp"
df_expr_rna_is_rp <- data.frame(expr_rna$genes$is_rp)
colnames(df_expr_rna_is_rp) <- "is_rp"
df_expr_te_is_rp <- data.frame(expr_te$genes$is_rp)
colnames(df_expr_te_is_rp) <- "is_rp"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_rp))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_rp))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_rp))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_rp"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_rp, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_rp"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_rp, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_rp"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_rp, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_rp))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_rp_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_rp))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_rp_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_rp))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_rp_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_rp <- df_temp_ribo[df_temp_ribo$is_rp==TRUE,]
df_temp_rna_rp <- df_temp_rna[df_temp_rna$is_rp==TRUE,]
df_temp_te_rp <- df_temp_te[df_temp_te$is_rp==TRUE,]

rownames(df_temp_ribo_rp) <- df_temp_ribo_rp$geneSymbol
rownames(df_temp_rna_rp) <- df_temp_rna_rp$geneSymbol
rownames(df_temp_te_rp) <- df_temp_te_rp$geneSymbol

mat_temp_ribo_rp <- data.matrix(df_temp_ribo_rp[,ind_subset])
mat_temp_rna_rp <- data.matrix(df_temp_rna_rp[,ind_subset])
mat_temp_te_rp <- data.matrix(df_temp_te_rp[,ind_subset])

mat_temp_ribo_rp_m <- melt(mat_temp_ribo_rp)
mat_temp_rna_rp_m <- melt(mat_temp_rna_rp)
mat_temp_te_rp_m <- melt(mat_temp_te_rp)

# Ribo
p <- ggplot(data = mat_temp_ribo_rp_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-2, 2), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("rp_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_rp_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("rp_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_rp_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("rp_TE_changes_heatmap.jpeg", plot=p, device="jpeg")

# Make violin plot for top mRNAs
# Make column is top mRNA

df_top_gene <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/top_list_20190606.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
colnames(df_top_gene) <- c("gene_ID")
list_top_gene <- df_top_gene$gene_ID

expr$genes$is_top_gene <- expr$genes$gene_ID %in% list_top_gene
expr_ribo$genes$is_top_gene <- expr_ribo$genes$gene_ID %in% list_top_gene
expr_rna$genes$is_top_gene <- expr_rna$genes$gene_ID %in% list_top_gene
expr_te$genes$is_top_gene <- expr_te$genes$gene_ID %in% list_top_gene

df_expr_is_top_gene <- data.frame(expr$genes$is_top_gene)
colnames(df_expr_is_top_gene) <- "is_top_gene"
df_expr_ribo_is_top_gene <- data.frame(expr_ribo$genes$is_top_gene)
colnames(df_expr_ribo_is_top_gene) <- "is_top_gene"
df_expr_rna_is_top_gene <- data.frame(expr_rna$genes$is_top_gene)
colnames(df_expr_rna_is_top_gene) <- "is_top_gene"
df_expr_te_is_top_gene <- data.frame(expr_te$genes$is_top_gene)
colnames(df_expr_te_is_top_gene) <- "is_top_gene"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_top_gene))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_top_gene))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_top_gene))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_top_gene"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_top_gene, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_top_gene"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_top_gene, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_top_gene"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_top_gene, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_top_gene))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_top_gene_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_top_gene))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_top_gene_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_top_gene))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_top_gene_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_top_gene <- df_temp_ribo[df_temp_ribo$is_top_gene==TRUE,]
df_temp_rna_top_gene <- df_temp_rna[df_temp_rna$is_top_gene==TRUE,]
df_temp_te_top_gene <- df_temp_te[df_temp_te$is_top_gene==TRUE,]

rownames(df_temp_ribo_top_gene) <- df_temp_ribo_top_gene$geneSymbol
rownames(df_temp_rna_top_gene) <- df_temp_rna_top_gene$geneSymbol
rownames(df_temp_te_top_gene) <- df_temp_te_top_gene$geneSymbol

mat_temp_ribo_top_gene <- data.matrix(df_temp_ribo_top_gene[,ind_subset])
mat_temp_rna_top_gene <- data.matrix(df_temp_rna_top_gene[,ind_subset])
mat_temp_te_top_gene <- data.matrix(df_temp_te_top_gene[,ind_subset])

mat_temp_ribo_top_gene_m <- melt(mat_temp_ribo_top_gene)
mat_temp_rna_top_gene_m <- melt(mat_temp_rna_top_gene)
mat_temp_te_top_gene_m <- melt(mat_temp_te_top_gene)

# Ribo
p <- ggplot(data = mat_temp_ribo_top_gene_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-2, 2), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("top_gene_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_top_gene_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("top_gene_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_top_gene_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("top_gene_TE_changes_heatmap.jpeg", plot=p, device="jpeg")




# Make violin plot for top-like mRNAs
# Make column is top-like mRNA

df_top_like_gene <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/top_like_list_20190606.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
colnames(df_top_like_gene) <- c("gene_ID")
list_top_like_gene <- df_top_like_gene$gene_ID

expr$genes$is_top_like_gene <- expr$genes$gene_ID %in% list_top_like_gene
expr_ribo$genes$is_top_like_gene <- expr_ribo$genes$gene_ID %in% list_top_like_gene
expr_rna$genes$is_top_like_gene <- expr_rna$genes$gene_ID %in% list_top_like_gene
expr_te$genes$is_top_like_gene <- expr_te$genes$gene_ID %in% list_top_like_gene

df_expr_is_top_like_gene <- data.frame(expr$genes$is_top_like_gene)
colnames(df_expr_is_top_like_gene) <- "is_top_like_gene"
df_expr_ribo_is_top_like_gene <- data.frame(expr_ribo$genes$is_top_like_gene)
colnames(df_expr_ribo_is_top_like_gene) <- "is_top_like_gene"
df_expr_rna_is_top_like_gene <- data.frame(expr_rna$genes$is_top_like_gene)
colnames(df_expr_rna_is_top_like_gene) <- "is_top_like_gene"
df_expr_te_is_top_like_gene <- data.frame(expr_te$genes$is_top_like_gene)
colnames(df_expr_te_is_top_like_gene) <- "is_top_like_gene"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_top_like_gene))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_top_like_gene))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_top_like_gene))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_top_like_gene"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_top_like_gene, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_top_like_gene"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_top_like_gene, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_top_like_gene"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_top_like_gene, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_top_like_gene))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_top_like_gene_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_top_like_gene))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_top_like_gene_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_top_like_gene))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_top_like_gene_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_top_like_gene <- df_temp_ribo[df_temp_ribo$is_top_like_gene==TRUE,]
df_temp_rna_top_like_gene <- df_temp_rna[df_temp_rna$is_top_like_gene==TRUE,]
df_temp_te_top_like_gene <- df_temp_te[df_temp_te$is_top_like_gene==TRUE,]

rownames(df_temp_ribo_top_like_gene) <- df_temp_ribo_top_like_gene$geneSymbol
rownames(df_temp_rna_top_like_gene) <- df_temp_rna_top_like_gene$geneSymbol
rownames(df_temp_te_top_like_gene) <- df_temp_te_top_like_gene$geneSymbol

mat_temp_ribo_top_like_gene <- data.matrix(df_temp_ribo_top_like_gene[,ind_subset])
mat_temp_rna_top_like_gene <- data.matrix(df_temp_rna_top_like_gene[,ind_subset])
mat_temp_te_top_like_gene <- data.matrix(df_temp_te_top_like_gene[,ind_subset])

mat_temp_ribo_top_like_gene_m <- melt(mat_temp_ribo_top_like_gene)
mat_temp_rna_top_like_gene_m <- melt(mat_temp_rna_top_like_gene)
mat_temp_te_top_like_gene_m <- melt(mat_temp_te_top_like_gene)

# Ribo
p <- ggplot(data = mat_temp_ribo_top_like_gene_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-2, 2), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("top_like_gene_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_top_like_gene_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("top_like_gene_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_top_like_gene_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1, face="bold"))
ggsave("top_like_gene_TE_changes_heatmap.jpeg", plot=p, device="jpeg")


# Make violin plot for whether it has uAUG

expr$genes$has_uAUG <- "NA"
expr_ribo$genes$has_uAUG <- "NA"
expr_rna$genes$has_uAUG <- "NA"
expr_te$genes$has_uAUG <- "NA"

expr$genes$has_uAUG[expr$genes$count_uAUG == 0] <- "No"
expr$genes$has_uAUG[expr$genes$count_uAUG > 0] <- "Yes"

expr_ribo$genes$has_uAUG[expr_ribo$genes$count_uAUG == 0] <- "No"
expr_ribo$genes$has_uAUG[expr_ribo$genes$count_uAUG > 0] <- "Yes"

expr_rna$genes$has_uAUG[expr_rna$genes$count_uAUG == 0] <- "No"
expr_rna$genes$has_uAUG[expr_rna$genes$count_uAUG > 0] <- "Yes"

expr_te$genes$has_uAUG[expr_te$genes$count_uAUG == 0] <- "No"
expr_te$genes$has_uAUG[expr_te$genes$count_uAUG > 0] <- "Yes"

df_expr_has_uAUG <- data.frame(expr$genes$has_uAUG)
colnames(df_expr_has_uAUG) <- "has_uAUG"
df_expr_ribo_has_uAUG <- data.frame(expr_ribo$genes$has_uAUG)
colnames(df_expr_ribo_has_uAUG) <- "has_uAUG"
df_expr_rna_has_uAUG <- data.frame(expr_rna$genes$has_uAUG)
colnames(df_expr_rna_has_uAUG) <- "has_uAUG"
df_expr_te_has_uAUG <- data.frame(expr_te$genes$has_uAUG)
colnames(df_expr_te_has_uAUG) <- "has_uAUG"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_has_uAUG))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_has_uAUG))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_has_uAUG))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("NA", "No", "Yes"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=3), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=3), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=3), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "has_uAUG"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$has_uAUG, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "has_uAUG"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$has_uAUG, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "has_uAUG"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$has_uAUG, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = has_uAUG))
p <- p + scale_y_continuous(limits = c(-3, 3))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("has_uAUG_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = has_uAUG))
p <- p + scale_y_continuous(limits = c(-3, 3))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("has_uAUG_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = has_uAUG))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("has_uAUG_te.jpeg", plot=p, device="jpeg")

### Translation related genes heatmap

df_tr <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/list_translation_related_20190606.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
colnames(df_tr) <- c("gene_ID", "gene_locus_id", "foldUtr3_mfe", "foldUtr5_mfe", "uniprot_accession", "geneSymbol", "refSeq_accession", "description", "ucsc_old_id", "entrez_id")
list_tr <- df_tr$gene_ID

expr$genes$is_tr <- expr$genes$gene_ID %in% list_tr
expr_ribo$genes$is_tr <- expr_ribo$genes$gene_ID %in% list_tr
expr_rna$genes$is_tr <- expr_rna$genes$gene_ID %in% list_tr
expr_te$genes$is_tr <- expr_te$genes$gene_ID %in% list_tr

df_expr_is_tr <- data.frame(expr$genes$is_tr)
colnames(df_expr_is_tr) <- "is_tr"
df_expr_ribo_is_tr <- data.frame(expr_ribo$genes$is_tr)
colnames(df_expr_ribo_is_tr) <- "is_tr"
df_expr_rna_is_tr <- data.frame(expr_rna$genes$is_tr)
colnames(df_expr_rna_is_tr) <- "is_tr"
df_expr_te_is_tr <- data.frame(expr_te$genes$is_tr)
colnames(df_expr_te_is_tr) <- "is_tr"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_tr))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_tr))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_tr))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# Make heat map

df_temp_ribo_tr <- df_temp_ribo[df_temp_ribo$is_tr==TRUE,]
df_temp_rna_tr <- df_temp_rna[df_temp_rna$is_tr==TRUE,]
df_temp_te_tr <- df_temp_te[df_temp_te$is_tr==TRUE,]

rownames(df_temp_ribo_tr) <- df_temp_ribo_tr$geneSymbol
rownames(df_temp_rna_tr) <- df_temp_rna_tr$geneSymbol
rownames(df_temp_te_tr) <- df_temp_te_tr$geneSymbol

mat_temp_ribo_tr <- data.matrix(df_temp_ribo_tr[,ind_subset])
mat_temp_rna_tr <- data.matrix(df_temp_rna_tr[,ind_subset])
mat_temp_te_tr <- data.matrix(df_temp_te_tr[,ind_subset])

mat_temp_ribo_tr_m <- melt(mat_temp_ribo_tr)
mat_temp_rna_tr_m <- melt(mat_temp_rna_tr)
mat_temp_te_tr_m <- melt(mat_temp_te_tr)

# Ribo
p <- ggplot(data = mat_temp_ribo_tr_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("tr_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_tr_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("tr_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_tr_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("tr_TE_changes_heatmap.jpeg", plot=p, device="jpeg")


# Hox genes

df_hox <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/hox_list_geneSymbol_20190606.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
colnames(df_hox) <- c("geneSymbol")
list_hox <- df_hox$geneSymbol

expr$genes$is_hox <- expr$genes$geneSymbol %in% list_hox
expr_ribo$genes$is_hox <- expr_ribo$genes$geneSymbol %in% list_hox
expr_rna$genes$is_hox <- expr_rna$genes$geneSymbol %in% list_hox
expr_te$genes$is_hox <- expr_te$genes$geneSymbol %in% list_hox

df_expr_is_hox <- data.frame(expr$genes$is_hox)
colnames(df_expr_is_hox) <- "is_hox"
df_expr_ribo_is_hox <- data.frame(expr_ribo$genes$is_hox)
colnames(df_expr_ribo_is_hox) <- "is_hox"
df_expr_rna_is_hox <- data.frame(expr_rna$genes$is_hox)
colnames(df_expr_rna_is_hox) <- "is_hox"
df_expr_te_is_hox <- data.frame(expr_te$genes$is_hox)
colnames(df_expr_te_is_hox) <- "is_hox"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_hox))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_hox))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_hox))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_hox"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_hox, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_hox"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_hox, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_hox"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_hox, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_hox))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_hox_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_hox))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_hox_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_hox))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_hox_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_hox <- df_temp_ribo[df_temp_ribo$is_hox==TRUE,]
df_temp_rna_hox <- df_temp_rna[df_temp_rna$is_hox==TRUE,]
df_temp_te_hox <- df_temp_te[df_temp_te$is_hox==TRUE,]

rownames(df_temp_ribo_hox) <- df_temp_ribo_hox$geneSymbol
rownames(df_temp_rna_hox) <- df_temp_rna_hox$geneSymbol
rownames(df_temp_te_hox) <- df_temp_te_hox$geneSymbol

mat_temp_ribo_hox <- data.matrix(df_temp_ribo_hox[,ind_subset])
mat_temp_rna_hox <- data.matrix(df_temp_rna_hox[,ind_subset])
mat_temp_te_hox <- data.matrix(df_temp_te_hox[,ind_subset])

mat_temp_ribo_hox_m <- melt(mat_temp_ribo_hox)
mat_temp_rna_hox_m <- melt(mat_temp_rna_hox)
mat_temp_te_hox_m <- melt(mat_temp_te_hox)

# Ribo
p <- ggplot(data = mat_temp_ribo_hox_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("hox_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_hox_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("hox_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_hox_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("hox_TE_changes_heatmap.jpeg", plot=p, device="jpeg")




# p53 target genes violin and heatmap
# Use data from http://genesdev.cshlp.org/content/27/9/1016.full - Supplementary Table 5
df_p53target <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/p53_target_list_induced_Kenzelmann.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
list_p53target <- tolower(df_p53target[,1])

expr$genes$is_p53target <- tolower(expr$genes$geneSymbol) %in% list_p53target
expr_ribo$genes$is_p53target <- tolower(expr_ribo$genes$geneSymbol) %in% list_p53target
expr_rna$genes$is_p53target <- tolower(expr_rna$genes$geneSymbol) %in% list_p53target
expr_te$genes$is_p53target <- tolower(expr_te$genes$geneSymbol) %in% list_p53target

df_expr_is_p53target <- data.frame(expr$genes$is_p53target)
colnames(df_expr_is_p53target) <- "is_p53target"
df_expr_ribo_is_p53target <- data.frame(expr_ribo$genes$is_p53target)
colnames(df_expr_ribo_is_p53target) <- "is_p53target"
df_expr_rna_is_p53target <- data.frame(expr_rna$genes$is_p53target)
colnames(df_expr_rna_is_p53target) <- "is_p53target"
df_expr_te_is_p53target <- data.frame(expr_te$genes$is_p53target)
colnames(df_expr_te_is_p53target) <- "is_p53target"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_p53target))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_p53target))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_p53target))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_p53target"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_p53target, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_p53target"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_p53target, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_p53target"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_p53target, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_p53target))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_p53target_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_p53target))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_p53target_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_p53target))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_p53target_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_p53target <- df_temp_ribo[df_temp_ribo$is_p53target==TRUE,]
df_temp_rna_p53target <- df_temp_rna[df_temp_rna$is_p53target==TRUE,]
df_temp_te_p53target <- df_temp_te[df_temp_te$is_p53target==TRUE,]

rownames(df_temp_ribo_p53target) <- df_temp_ribo_p53target$geneSymbol
rownames(df_temp_rna_p53target) <- df_temp_rna_p53target$geneSymbol
rownames(df_temp_te_p53target) <- df_temp_te_p53target$geneSymbol

mat_temp_ribo_p53target <- data.matrix(df_temp_ribo_p53target[,ind_subset])
mat_temp_rna_p53target <- data.matrix(df_temp_rna_p53target[,ind_subset])
mat_temp_te_p53target <- data.matrix(df_temp_te_p53target[,ind_subset])

mat_temp_ribo_p53target_m <- melt(mat_temp_ribo_p53target)
mat_temp_rna_p53target_m <- melt(mat_temp_rna_p53target)
mat_temp_te_p53target_m <- melt(mat_temp_te_p53target)

# Ribo
p <- ggplot(data = mat_temp_ribo_p53target_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-8, 8), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=2, hjust = 1))
ggsave("p53target_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_p53target_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-8, 8), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=2, hjust = 1))
ggsave("p53target_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_p53target_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-2, 2), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=2, hjust = 1))
ggsave("p53target_TE_changes_heatmap.jpeg", plot=p, device="jpeg")


# mTOR targets (translation) heatmap
df_mTOR_te <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/mTOR_inhib_sabatini_te_down_list.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
list_mTOR_te <- tolower(df_mTOR_te[,1])

expr$genes$is_mTOR_te <- tolower(expr$genes$geneSymbol) %in% list_mTOR_te
expr_ribo$genes$is_mTOR_te <- tolower(expr_ribo$genes$geneSymbol) %in% list_mTOR_te
expr_rna$genes$is_mTOR_te <- tolower(expr_rna$genes$geneSymbol) %in% list_mTOR_te
expr_te$genes$is_mTOR_te <- tolower(expr_te$genes$geneSymbol) %in% list_mTOR_te

df_expr_is_mTOR_te <- data.frame(expr$genes$is_mTOR_te)
colnames(df_expr_is_mTOR_te) <- "is_mTOR_te"
df_expr_ribo_is_mTOR_te <- data.frame(expr_ribo$genes$is_mTOR_te)
colnames(df_expr_ribo_is_mTOR_te) <- "is_mTOR_te"
df_expr_rna_is_mTOR_te <- data.frame(expr_rna$genes$is_mTOR_te)
colnames(df_expr_rna_is_mTOR_te) <- "is_mTOR_te"
df_expr_te_is_mTOR_te <- data.frame(expr_te$genes$is_mTOR_te)
colnames(df_expr_te_is_mTOR_te) <- "is_mTOR_te"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_mTOR_te))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_mTOR_te))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_mTOR_te))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_mTOR_te"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_mTOR_te, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_mTOR_te"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_mTOR_te, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_mTOR_te"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_mTOR_te, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_mTOR_te))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_mTOR_te_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_mTOR_te))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_mTOR_te_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_mTOR_te))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_mTOR_te_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_mTOR_te <- df_temp_ribo[df_temp_ribo$is_mTOR_te==TRUE,]
df_temp_rna_mTOR_te <- df_temp_rna[df_temp_rna$is_mTOR_te==TRUE,]
df_temp_te_mTOR_te <- df_temp_te[df_temp_te$is_mTOR_te==TRUE,]

rownames(df_temp_ribo_mTOR_te) <- df_temp_ribo_mTOR_te$geneSymbol
rownames(df_temp_rna_mTOR_te) <- df_temp_rna_mTOR_te$geneSymbol
rownames(df_temp_te_mTOR_te) <- df_temp_te_mTOR_te$geneSymbol

mat_temp_ribo_mTOR_te <- data.matrix(df_temp_ribo_mTOR_te[,ind_subset])
mat_temp_rna_mTOR_te <- data.matrix(df_temp_rna_mTOR_te[,ind_subset])
mat_temp_te_mTOR_te <- data.matrix(df_temp_te_mTOR_te[,ind_subset])

mat_temp_ribo_mTOR_te_m <- melt(mat_temp_ribo_mTOR_te)
mat_temp_rna_mTOR_te_m <- melt(mat_temp_rna_mTOR_te)
mat_temp_te_mTOR_te_m <- melt(mat_temp_te_mTOR_te)

# Ribo
p <- ggplot(data = mat_temp_ribo_mTOR_te_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("mTOR_te_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_mTOR_te_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("mTOR_te_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_mTOR_te_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("mTOR_te_TE_changes_heatmap.jpeg", plot=p, device="jpeg")

# mTOR targets (RNA) heatmap
df_mTOR_rna <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/mTOR_inhib_sabatini_rna_down_list.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
list_mTOR_rna <- tolower(df_mTOR_rna[,1])

expr$genes$is_mTOR_rna <- tolower(expr$genes$geneSymbol) %in% list_mTOR_rna
expr_ribo$genes$is_mTOR_rna <- tolower(expr_ribo$genes$geneSymbol) %in% list_mTOR_rna
expr_rna$genes$is_mTOR_rna <- tolower(expr_rna$genes$geneSymbol) %in% list_mTOR_rna
expr_te$genes$is_mTOR_rna <- tolower(expr_te$genes$geneSymbol) %in% list_mTOR_rna

df_expr_is_mTOR_rna <- data.frame(expr$genes$is_mTOR_rna)
colnames(df_expr_is_mTOR_rna) <- "is_mTOR_rna"
df_expr_ribo_is_mTOR_rna <- data.frame(expr_ribo$genes$is_mTOR_rna)
colnames(df_expr_ribo_is_mTOR_rna) <- "is_mTOR_rna"
df_expr_rna_is_mTOR_rna <- data.frame(expr_rna$genes$is_mTOR_rna)
colnames(df_expr_rna_is_mTOR_rna) <- "is_mTOR_rna"
df_expr_te_is_mTOR_rna <- data.frame(expr_te$genes$is_mTOR_rna)
colnames(df_expr_te_is_mTOR_rna) <- "is_mTOR_rna"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_mTOR_rna))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_mTOR_rna))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_mTOR_rna))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_mTOR_rna"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_mTOR_rna, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_mTOR_rna"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_mTOR_rna, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_mTOR_rna"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_mTOR_rna, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_mTOR_rna))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_mTOR_rna_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_mTOR_rna))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_mTOR_rna_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_mTOR_rna))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_mTOR_rna_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_mTOR_rna <- df_temp_ribo[df_temp_ribo$is_mTOR_rna==TRUE,]
df_temp_rna_mTOR_rna <- df_temp_rna[df_temp_rna$is_mTOR_rna==TRUE,]
df_temp_te_mTOR_rna <- df_temp_te[df_temp_te$is_mTOR_rna==TRUE,]

rownames(df_temp_ribo_mTOR_rna) <- df_temp_ribo_mTOR_rna$geneSymbol
rownames(df_temp_rna_mTOR_rna) <- df_temp_rna_mTOR_rna$geneSymbol
rownames(df_temp_te_mTOR_rna) <- df_temp_te_mTOR_rna$geneSymbol

mat_temp_ribo_mTOR_rna <- data.matrix(df_temp_ribo_mTOR_rna[,ind_subset])
mat_temp_rna_mTOR_rna <- data.matrix(df_temp_rna_mTOR_rna[,ind_subset])
mat_temp_te_mTOR_rna <- data.matrix(df_temp_te_mTOR_rna[,ind_subset])

mat_temp_ribo_mTOR_rna_m <- melt(mat_temp_ribo_mTOR_rna)
mat_temp_rna_mTOR_rna_m <- melt(mat_temp_rna_mTOR_rna)
mat_temp_te_mTOR_rna_m <- melt(mat_temp_te_mTOR_rna)

# Ribo
p <- ggplot(data = mat_temp_ribo_mTOR_rna_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("mTOR_rna_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_mTOR_rna_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("mTOR_rna_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_mTOR_rna_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("mTOR_rna_TE_changes_heatmap.jpeg", plot=p, device="jpeg")


# radius_phenocopy heatmap
df_radius <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/radius_phenocopy_list.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
list_radius <- tolower(df_radius[,1])

expr$genes$is_radius <- tolower(expr$genes$geneSymbol) %in% list_radius
expr_ribo$genes$is_radius <- tolower(expr_ribo$genes$geneSymbol) %in% list_radius
expr_rna$genes$is_radius <- tolower(expr_rna$genes$geneSymbol) %in% list_radius
expr_te$genes$is_radius <- tolower(expr_te$genes$geneSymbol) %in% list_radius

df_expr_is_radius <- data.frame(expr$genes$is_radius)
colnames(df_expr_is_radius) <- "is_radius"
df_expr_ribo_is_radius <- data.frame(expr_ribo$genes$is_radius)
colnames(df_expr_ribo_is_radius) <- "is_radius"
df_expr_rna_is_radius <- data.frame(expr_rna$genes$is_radius)
colnames(df_expr_rna_is_radius) <- "is_radius"
df_expr_te_is_radius <- data.frame(expr_te$genes$is_radius)
colnames(df_expr_te_is_radius) <- "is_radius"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_radius))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_radius))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_radius))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_radius"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_radius, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_radius"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_radius, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_radius"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_radius, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_radius))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_radius_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_radius))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_radius_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_radius))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_radius_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_radius <- df_temp_ribo[df_temp_ribo$is_radius==TRUE,]
df_temp_rna_radius <- df_temp_rna[df_temp_rna$is_radius==TRUE,]
df_temp_te_radius <- df_temp_te[df_temp_te$is_radius==TRUE,]

rownames(df_temp_ribo_radius) <- df_temp_ribo_radius$geneSymbol
rownames(df_temp_rna_radius) <- df_temp_rna_radius$geneSymbol
rownames(df_temp_te_radius) <- df_temp_te_radius$geneSymbol

mat_temp_ribo_radius <- data.matrix(df_temp_ribo_radius[,ind_subset])
mat_temp_rna_radius <- data.matrix(df_temp_rna_radius[,ind_subset])
mat_temp_te_radius <- data.matrix(df_temp_te_radius[,ind_subset])

mat_temp_ribo_radius_m <- melt(mat_temp_ribo_radius)
mat_temp_rna_radius_m <- melt(mat_temp_rna_radius)
mat_temp_te_radius_m <- melt(mat_temp_te_radius)

# Ribo
p <- ggplot(data = mat_temp_ribo_radius_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("radius_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_radius_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("radius_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_radius_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("radius_TE_changes_heatmap.jpeg", plot=p, device="jpeg")


# scapula_phenocopy heatmap
df_scapula <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/scapula_phenocopy_list.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
list_scapula <- tolower(df_scapula[,1])

expr$genes$is_scapula <- tolower(expr$genes$geneSymbol) %in% list_scapula
expr_ribo$genes$is_scapula <- tolower(expr_ribo$genes$geneSymbol) %in% list_scapula
expr_rna$genes$is_scapula <- tolower(expr_rna$genes$geneSymbol) %in% list_scapula
expr_te$genes$is_scapula <- tolower(expr_te$genes$geneSymbol) %in% list_scapula

df_expr_is_scapula <- data.frame(expr$genes$is_scapula)
colnames(df_expr_is_scapula) <- "is_scapula"
df_expr_ribo_is_scapula <- data.frame(expr_ribo$genes$is_scapula)
colnames(df_expr_ribo_is_scapula) <- "is_scapula"
df_expr_rna_is_scapula <- data.frame(expr_rna$genes$is_scapula)
colnames(df_expr_rna_is_scapula) <- "is_scapula"
df_expr_te_is_scapula <- data.frame(expr_te$genes$is_scapula)
colnames(df_expr_te_is_scapula) <- "is_scapula"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_scapula))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_scapula))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_scapula))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_scapula"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_scapula, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_scapula"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_scapula, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_scapula"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_scapula, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_scapula))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_scapula_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_scapula))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_scapula_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_scapula))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_scapula_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_scapula <- df_temp_ribo[df_temp_ribo$is_scapula==TRUE,]
df_temp_rna_scapula <- df_temp_rna[df_temp_rna$is_scapula==TRUE,]
df_temp_te_scapula <- df_temp_te[df_temp_te$is_scapula==TRUE,]

rownames(df_temp_ribo_scapula) <- df_temp_ribo_scapula$geneSymbol
rownames(df_temp_rna_scapula) <- df_temp_rna_scapula$geneSymbol
rownames(df_temp_te_scapula) <- df_temp_te_scapula$geneSymbol

mat_temp_ribo_scapula <- data.matrix(df_temp_ribo_scapula[,ind_subset])
mat_temp_rna_scapula <- data.matrix(df_temp_rna_scapula[,ind_subset])
mat_temp_te_scapula <- data.matrix(df_temp_te_scapula[,ind_subset])

mat_temp_ribo_scapula_m <- melt(mat_temp_ribo_scapula)
mat_temp_rna_scapula_m <- melt(mat_temp_rna_scapula)
mat_temp_te_scapula_m <- melt(mat_temp_te_scapula)

# Ribo
p <- ggplot(data = mat_temp_ribo_scapula_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("scapula_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_scapula_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1.5, 1.5), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("scapula_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_scapula_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("scapula_TE_changes_heatmap.jpeg", plot=p, device="jpeg")

# proximal_distal heatmap
df_proximal_distal <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/proximal_distal_list.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
list_proximal_distal <- tolower(df_proximal_distal[,1])

expr$genes$is_proximal_distal <- tolower(expr$genes$geneSymbol) %in% list_proximal_distal
expr_ribo$genes$is_proximal_distal <- tolower(expr_ribo$genes$geneSymbol) %in% list_proximal_distal
expr_rna$genes$is_proximal_distal <- tolower(expr_rna$genes$geneSymbol) %in% list_proximal_distal
expr_te$genes$is_proximal_distal <- tolower(expr_te$genes$geneSymbol) %in% list_proximal_distal

df_expr_is_proximal_distal <- data.frame(expr$genes$is_proximal_distal)
colnames(df_expr_is_proximal_distal) <- "is_proximal_distal"
df_expr_ribo_is_proximal_distal <- data.frame(expr_ribo$genes$is_proximal_distal)
colnames(df_expr_ribo_is_proximal_distal) <- "is_proximal_distal"
df_expr_rna_is_proximal_distal <- data.frame(expr_rna$genes$is_proximal_distal)
colnames(df_expr_rna_is_proximal_distal) <- "is_proximal_distal"
df_expr_te_is_proximal_distal <- data.frame(expr_te$genes$is_proximal_distal)
colnames(df_expr_te_is_proximal_distal) <- "is_proximal_distal"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_proximal_distal))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_proximal_distal))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_proximal_distal))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_proximal_distal"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_proximal_distal, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_proximal_distal"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_proximal_distal, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_proximal_distal"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_proximal_distal, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_proximal_distal))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_proximal_distal_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_proximal_distal))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_proximal_distal_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_proximal_distal))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_proximal_distal_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_proximal_distal <- df_temp_ribo[df_temp_ribo$is_proximal_distal==TRUE,]
df_temp_rna_proximal_distal <- df_temp_rna[df_temp_rna$is_proximal_distal==TRUE,]
df_temp_te_proximal_distal <- df_temp_te[df_temp_te$is_proximal_distal==TRUE,]

rownames(df_temp_ribo_proximal_distal) <- df_temp_ribo_proximal_distal$geneSymbol
rownames(df_temp_rna_proximal_distal) <- df_temp_rna_proximal_distal$geneSymbol
rownames(df_temp_te_proximal_distal) <- df_temp_te_proximal_distal$geneSymbol

mat_temp_ribo_proximal_distal <- data.matrix(df_temp_ribo_proximal_distal[,ind_subset])
mat_temp_rna_proximal_distal <- data.matrix(df_temp_rna_proximal_distal[,ind_subset])
mat_temp_te_proximal_distal <- data.matrix(df_temp_te_proximal_distal[,ind_subset])

mat_temp_ribo_proximal_distal_m <- melt(mat_temp_ribo_proximal_distal)
mat_temp_rna_proximal_distal_m <- melt(mat_temp_rna_proximal_distal)
mat_temp_te_proximal_distal_m <- melt(mat_temp_te_proximal_distal)

# Ribo
p <- ggplot(data = mat_temp_ribo_proximal_distal_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("proximal_distal_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_proximal_distal_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("proximal_distal_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_proximal_distal_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("proximal_distal_TE_changes_heatmap.jpeg", plot=p, device="jpeg")

# anterior_posterior_phenocopy heatmap
df_anterior_posterior <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/anterior_posterior_list.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
list_anterior_posterior <- tolower(df_anterior_posterior[,1])

expr$genes$is_anterior_posterior <- tolower(expr$genes$geneSymbol) %in% list_anterior_posterior
expr_ribo$genes$is_anterior_posterior <- tolower(expr_ribo$genes$geneSymbol) %in% list_anterior_posterior
expr_rna$genes$is_anterior_posterior <- tolower(expr_rna$genes$geneSymbol) %in% list_anterior_posterior
expr_te$genes$is_anterior_posterior <- tolower(expr_te$genes$geneSymbol) %in% list_anterior_posterior

df_expr_is_anterior_posterior <- data.frame(expr$genes$is_anterior_posterior)
colnames(df_expr_is_anterior_posterior) <- "is_anterior_posterior"
df_expr_ribo_is_anterior_posterior <- data.frame(expr_ribo$genes$is_anterior_posterior)
colnames(df_expr_ribo_is_anterior_posterior) <- "is_anterior_posterior"
df_expr_rna_is_anterior_posterior <- data.frame(expr_rna$genes$is_anterior_posterior)
colnames(df_expr_rna_is_anterior_posterior) <- "is_anterior_posterior"
df_expr_te_is_anterior_posterior <- data.frame(expr_te$genes$is_anterior_posterior)
colnames(df_expr_te_is_anterior_posterior) <- "is_anterior_posterior"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_is_anterior_posterior))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_is_anterior_posterior))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_is_anterior_posterior))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("TRUE", "FALSE"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=2), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=2), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=2), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "is_anterior_posterior"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$is_anterior_posterior, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "is_anterior_posterior"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$is_anterior_posterior, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "is_anterior_posterior"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$is_anterior_posterior, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = is_anterior_posterior))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_anterior_posterior_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = is_anterior_posterior))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_anterior_posterior_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = is_anterior_posterior))
p <- p + scale_y_continuous(limits = c(-2, 2))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("is_anterior_posterior_te.jpeg", plot=p, device="jpeg")


# Make heat map

df_temp_ribo_anterior_posterior <- df_temp_ribo[df_temp_ribo$is_anterior_posterior==TRUE,]
df_temp_rna_anterior_posterior <- df_temp_rna[df_temp_rna$is_anterior_posterior==TRUE,]
df_temp_te_anterior_posterior <- df_temp_te[df_temp_te$is_anterior_posterior==TRUE,]

rownames(df_temp_ribo_anterior_posterior) <- df_temp_ribo_anterior_posterior$geneSymbol
rownames(df_temp_rna_anterior_posterior) <- df_temp_rna_anterior_posterior$geneSymbol
rownames(df_temp_te_anterior_posterior) <- df_temp_te_anterior_posterior$geneSymbol

mat_temp_ribo_anterior_posterior <- data.matrix(df_temp_ribo_anterior_posterior[,ind_subset])
mat_temp_rna_anterior_posterior <- data.matrix(df_temp_rna_anterior_posterior[,ind_subset])
mat_temp_te_anterior_posterior <- data.matrix(df_temp_te_anterior_posterior[,ind_subset])

mat_temp_ribo_anterior_posterior_m <- melt(mat_temp_ribo_anterior_posterior)
mat_temp_rna_anterior_posterior_m <- melt(mat_temp_rna_anterior_posterior)
mat_temp_te_anterior_posterior_m <- melt(mat_temp_te_anterior_posterior)

# Ribo
p <- ggplot(data = mat_temp_ribo_anterior_posterior_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "Ribo changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("anterior_posterior_Ribo_changes_heatmap.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(data = mat_temp_rna_anterior_posterior_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "RNA changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("anterior_posterior_RNA_changes_heatmap.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(data = mat_temp_te_anterior_posterior_m,
            aes(x = Var2, y = Var1, fill = value)) + 
  geom_raster() +
  labs(title = "TE changes") + 
  scale_fill_gradient2(limits=c(-1, 1), low = "blue", high = "red", mid = "white", 
                       # scale_fill_gradient2(low = "blue", high = "red", mid = "white", 
                       midpoint = 0, space = "Lab", 
                       name="value") + 
  theme(axis.text.x = element_text(size=6, angle = 45, hjust = 1),
        axis.text.y = element_text(size=5, hjust = 1))
ggsave("anterior_posterior_TE_changes_heatmap.jpeg", plot=p, device="jpeg")

# Make violin plot for anterior and posterior genes

df_anterior <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/anterior_list.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")
df_posterior <- read.table("/Users/geraldctiu/Documents/workspace/20171229_Update_Ribosome_Profiling_Pipeline_UMI/posterior_list.txt", sep="\t", stringsAsFactor=FALSE, header=FALSE, quote="", comment.char="")

list_anterior_tar <- tolower(df_anterior[,1])
list_posterior_tar <- tolower(df_posterior[,1])

expr$genes$anterior_or_posterior <- "Neither"
expr_ribo$genes$anterior_or_posterior <- "Neither"
expr_rna$genes$anterior_or_posterior <- "Neither"
expr_te$genes$anterior_or_posterior <- "Neither"

expr$genes$anterior_or_posterior[tolower(expr$genes$geneSymbol) %in% list_anterior_tar] <- "Anterior"
expr$genes$anterior_or_posterior[tolower(expr$genes$geneSymbol) %in% list_posterior_tar] <- "Posterior"

expr_ribo$genes$anterior_or_posterior[tolower(expr_ribo$genes$geneSymbol) %in% list_anterior_tar] <- "Anterior"
expr_ribo$genes$anterior_or_posterior[tolower(expr_ribo$genes$geneSymbol) %in% list_posterior_tar] <- "Posterior"

expr_rna$genes$anterior_or_posterior[tolower(expr_rna$genes$geneSymbol) %in% list_anterior_tar] <- "Anterior"
expr_rna$genes$anterior_or_posterior[tolower(expr_rna$genes$geneSymbol) %in% list_posterior_tar] <- "Posterior"

expr_te$genes$anterior_or_posterior[tolower(expr_te$genes$geneSymbol) %in% list_anterior_tar] <- "Anterior"
expr_te$genes$anterior_or_posterior[tolower(expr_te$genes$geneSymbol) %in% list_posterior_tar] <- "Posterior"

df_expr_anterior_or_posterior <- data.frame(expr$genes$anterior_or_posterior)
colnames(df_expr_anterior_or_posterior) <- "anterior_or_posterior"
df_expr_ribo_anterior_or_posterior <- data.frame(expr_ribo$genes$anterior_or_posterior)
colnames(df_expr_ribo_anterior_or_posterior) <- "anterior_or_posterior"
df_expr_rna_anterior_or_posterior <- data.frame(expr_rna$genes$anterior_or_posterior)
colnames(df_expr_rna_anterior_or_posterior) <- "anterior_or_posterior"
df_expr_te_anterior_or_posterior <- data.frame(expr_te$genes$anterior_or_posterior)
colnames(df_expr_te_anterior_or_posterior) <- "anterior_or_posterior"

df_temp_ribo <- data.frame(cbind(efit_ribo_subset$coefficients, df_expr_ribo_anterior_or_posterior))
df_temp_rna <- data.frame(cbind(efit_rna_subset$coefficients, df_expr_rna_anterior_or_posterior))
df_temp_te <- data.frame(cbind(efit_te_subset$coefficients, df_expr_te_anterior_or_posterior))

# Create column of gene_IDs
df_temp_ribo$gene_ID <- rownames(df_temp_ribo)
df_temp_rna$gene_ID <- rownames(df_temp_rna)
df_temp_te$gene_ID <- rownames(df_temp_te)

# Create column of geneSymbols
df_temp_ribo$geneSymbol <- expr_ribo$genes$geneSymbol
df_temp_rna$geneSymbol <- expr_rna$genes$geneSymbol
df_temp_te$geneSymbol <- expr_te$genes$geneSymbol

# write.csv(df_temp_ribo, file="output_ribo.csv", row.names=FALSE)


cont_ribo <- colnames(df_temp_ribo[,ind_subset])
cont_rna <- colnames(df_temp_rna[,ind_subset])
cont_te <- colnames(df_temp_te[,ind_subset])

rep_list <- rep(c("Anterior", "Neither", "Posterior"), length(ind_subset))

factor_vector_ribo <- paste(rep(cont_ribo, each=3), rep_list, sep="_")
factor_vector_rna <- paste(rep(cont_rna, each=3), rep_list, sep="_")
factor_vector_te <- paste(rep(cont_te, each=3), rep_list, sep="_")

df_temp_ribo_m <- melt(df_temp_ribo, id=c("gene_ID", "geneSymbol", "anterior_or_posterior"))
df_temp_ribo_m$variable2 <- factor(paste(df_temp_ribo_m$variable, df_temp_ribo_m$anterior_or_posterior, sep="_"), levels = factor_vector_ribo)
df_temp_rna_m <- melt(df_temp_rna, id=c("gene_ID", "geneSymbol", "anterior_or_posterior"))
df_temp_rna_m$variable2 <- factor(paste(df_temp_rna_m$variable, df_temp_rna_m$anterior_or_posterior, sep="_"), levels = factor_vector_rna)
df_temp_te_m <- melt(df_temp_te, id=c("gene_ID", "geneSymbol", "anterior_or_posterior"))
df_temp_te_m$variable2 <- factor(paste(df_temp_te_m$variable, df_temp_te_m$anterior_or_posterior, sep="_"), levels = factor_vector_te)


# Plot violin plot
# Ribo
p <- ggplot(df_temp_ribo_m) + geom_violin(aes(x=variable2, y=value, fill = anterior_or_posterior))
p <- p + scale_y_continuous(limits = c(-1.5, 1.5))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("anterior_or_posterior_ribo.jpeg", plot=p, device="jpeg")

# RNA
p <- ggplot(df_temp_rna_m) + geom_violin(aes(x=variable2, y=value, fill = anterior_or_posterior))
p <- p + scale_y_continuous(limits = c(-1.5, 1.5))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("anterior_or_posterior_rna.jpeg", plot=p, device="jpeg")

# TE
p <- ggplot(df_temp_te_m) + geom_violin(aes(x=variable2, y=value, fill = anterior_or_posterior))
p <- p + scale_y_continuous(limits = c(-1.5, 1.5))
p <- p + theme_bw()
p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
               axis.text.y = element_text(size=16, face="bold"))
ggsave("anterior_or_posterior_te.jpeg", plot=p, device="jpeg")


# Find significant TE change in s6het_p53wt_TE_vs_s6wt_p53wt_TE_minus_s6het_p53null_TE_vs_s6wt_p53null_TE
# that change in same direction as significant changes in Ribo in s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo
# Plot TE vs. TE changes
i=9
j=1
name1 <- cont_vec_te[i]
# name1 <- "s6het_p53wt_TE_vs_s6wt_p53wt_TE_minus_s6het_p53null_TE_vs_s6wt_p53null_TE"
name2 <- cont_vec_ribo[j]
# name2 <- "s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo"
title <- paste(name1, "against", name2, sep="_")
    
# 0 no change
# 1 change in TE1
# 2 change in Ribo2
# 3 change in both in same direction
dt2 <- rep(0, nrow(dt_te))
dt2[dt_te[,i]!=0] <- 1
dt2[dt_ribo[,j]!=0] <- 2
dt2[((dt_te[,i]<0) & (dt_ribo[,j]<0)) | ((dt_te[,i]>0) & (dt_ribo[,j]>0))] <- 3
table(dt2)
dt2 <- data.frame(dt2)
dt2[,1] <- as.factor(dt2[,1])
rownames(dt2) <- efit_te$genes$gene_ID

coef1 <- paste("coef", name1, sep="_")
coef2 <- paste("coef", name2, sep="_")
pval1 <- paste("pval", name1, sep="_")
pval2 <- paste("pval", name2, sep="_")
dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, coef2, pval1, pval2, "status")
dt_output <- data.frame(efit_te$genes$gene_ID, efit_te$genes$geneSymbol, 
                        efit_te[,i]$coefficients, efit_ribo[,j]$coefficients, 
                        efit_te[,i]$p.value, efit_ribo[,j]$p.value,
                        dt2[,1])
colnames(dt_output) <- dt_output_col_names
f_out_name <- paste("p53_dep_table_TE_vs_Ribo", "_", name1, "_", name2, ".csv", sep="")
write.csv(dt_output, file=f_out_name, row.names=FALSE)

col <- brewer.pal(4, "Set1")
cols <- c("grey", col[2], col[1], col[4])
cols <- cols[1:nlevels(dt2[,1])]

#Figure quality scatter plot with labels
scatter_plot_2_name <- paste("p53_dep_scatter_2_TE_vs_Ribo", "_", title, ".jpeg", sep="")
e_subset <- data.frame(efit_te[,i]$coefficients, efit_ribo[,j]$coefficients, dt2[,1], efit_te[,i]$genes$geneSymbol)
colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
p <- ggplot(e_subset) + 
  geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") + 
  geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) + 
  geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
  geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
  # xlim(c(-2.5,2.5)) +
  # ylim(c(-2.5,2.5)) +
  labs(title = title) + 
  xlab(name1) + ylab(name2) + 
  theme_bw() +
  theme(axis.text=element_text(size=16,face="bold"),
        axis.title=element_text(size=8,face="bold"))
ggsave(scatter_plot_2_name, device="jpeg")

# #Figure quality scatter plot with labels
scatter_plot_3_name <- paste("p53_dep_scatter_3_TE_vs_Ribo", "_", title, ".jpeg", sep="")
e_subset <- data.frame(efit_te[,i]$coefficients, efit_ribo[,j]$coefficients, dt2[,1], efit_te[,i]$genes$geneSymbol)
colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
p <- ggplot(e_subset) +
  geom_point(data=subset(e_subset, status == "0"), aes(x=samp1, y=samp2), alpha = 0.2, shape = ".") +
  geom_point(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2), colour=cols[2], alpha = 0.3) +
  geom_point(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2), colour=cols[3], alpha = 0.3) +
  geom_point(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2), colour=cols[4], alpha = 0.3) +
  # geom_text_repel(data=subset(e_subset, status == "1"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) +
  # geom_text_repel(data=subset(e_subset, status == "2"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) +
  geom_text_repel(data=subset(e_subset, status == "3"), aes(x=samp1, y=samp2, label=geneSymbol), point.padding = NA) +
  # xlim(c(-2.5,2.5)) +
  # ylim(c(-2.5,2.5)) +
  labs(title = title) +
  xlab(name1) + ylab(name2) +
  theme_bw() +
  theme(axis.text=element_text(size=16,face="bold"),
        axis.title=element_text(size=8,face="bold"))
ggsave(scatter_plot_3_name, device="jpeg")

html_folder <- paste("p53_dep_scatter_TE_vs_Ribo", "_", title, sep="")
html_file_name <- paste("p53_dep_scatter_TE_vs_Ribo", "_", title, sep="")
glXYPlot(x=efit_te[,i]$coefficients, y=efit_ribo[,j]$coefficients, xlab=name1, ylab=name2, 
         status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_te$genes, main=title,
         counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)

# Goal plot Ribo vs. RNA
# Highlight the following:
# 1) Find significant TE change in s6het_p53wt_TE_vs_s6wt_p53wt_TE_minus_s6het_p53null_TE_vs_s6wt_p53null_TE
# 2) Find significant change in Ribo for s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo_minus_s6het_p53null_Ribo_vs_s6wt_p53null_Ribo
# 3) Subset to find significant change in Ribo for  s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo
# Plot Ribo vs. RNA changes
i=9
j=1
name1 <- cont_vec_ribo[i]
# name1 <- "s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo_minus_s6het_p53null_Ribo_vs_s6wt_p53null_Ribo"
name2 <- cont_vec_rna[i]
# name2 <- "s6het_p53wt_RNA_vs_s6wt_p53wt_RNA_minus_s6het_p53null_RNA_vs_s6wt_p53null_RNA"
name3 <- cont_vec_te[i]
title <- paste(name1, "against", name2, sep="_")

# See description of block for key
# 0 no change
# 1 change in TE (1)
# 2 change in TE (1) & Ribo (2)
# 3 change in TE (1) & Ribo (2) & Ribo (3)
dt2 <- rep(0, nrow(dt_te))
dt2[dt_te[,i]!=0] <- 1
dt2[(dt_te[,i]!=0) & (dt_ribo[,i]!=0)] <- 2
dt2[(dt_te[,i]!=0) & (dt_ribo[,i]!=0) & (dt_ribo[,j]!=0)] <- 3
table(dt2)
dt2 <- data.frame(dt2)
dt2[,1] <- as.factor(dt2[,1])
rownames(dt2) <- efit_te$genes$gene_ID

coef1 <- paste("coef", name1, sep="_")
coef2 <- paste("coef", name2, sep="_")
coef3 <- paste("coef", name2, sep="_")
pval1 <- paste("pval", name1, sep="_")
pval2 <- paste("pval", name2, sep="_")
pval3 <- paste("pval", name3, sep="_")
dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, pval1, coef2, pval2, coef3, pval3, "status")
dt_output <- data.frame(efit_te$genes$gene_ID, efit_te$genes$geneSymbol, 
                        efit_ribo[,i]$coefficients, efit_ribo[,j]$p.value, 
                        efit_rna[,i]$coefficients, efit_rna[,j]$p.value, 
                        efit_te[,i]$coefficients, efit_te[,i]$p.value, 
                        dt2[,1])
colnames(dt_output) <- dt_output_col_names
# Name too long for Excel
# f_out_name <- paste("p53_dep_table_TE_Ribo_RNA", "_", name1, "_", name2, ".csv", sep="")
f_out_name <- paste("p53_dep_table_Ribo_RNA_TE.csv", sep="")
write.csv(dt_output, file=f_out_name, row.names=FALSE)

col <- brewer.pal(4, "Set1")
cols <- c("grey", col[2], col[1], col[4])
cols <- cols[1:nlevels(dt2[,1])]

#Figure quality scatter plot without labels
scatter_plot_2_name <- paste("p53_dep_scatter_2_Ribo_vs_RNA", "_", title, ".jpeg", sep="")
e_subset <- data.frame(efit_ribo[,i]$coefficients, efit_rna[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
p <- ggplot(e_subset) + 
  geom_point(data=subset(e_subset, status == "0"), aes(x=samp2, y=samp1), alpha = 0.2, shape = ".") + 
  geom_point(data=subset(e_subset, status == "1"), aes(x=samp2, y=samp1), colour=cols[2], alpha = 0.3) + 
  geom_point(data=subset(e_subset, status == "2"), aes(x=samp2, y=samp1), colour=cols[3], alpha = 0.3) +
  geom_point(data=subset(e_subset, status == "3"), aes(x=samp2, y=samp1), colour=cols[4], alpha = 0.3) +
  xlim(c(-2.5,2.5)) +
  ylim(c(-2.5,2.5)) +
  labs(title = title) + 
  xlab(name2) + ylab(name1) + 
  theme_bw() +
  theme(axis.text=element_text(size=16,face="bold"),
        axis.title=element_text(size=8,face="bold"))
ggsave(scatter_plot_2_name, device="jpeg")

#Figure quality scatter plot with labels
scatter_plot_3_name <- paste("p53_dep_scatter_3_Ribo_vs_RNA", "_", title, ".jpeg", sep="")
e_subset <- data.frame(efit_ribo[,i]$coefficients, efit_rna[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
p <- ggplot(e_subset) + 
  geom_point(data=subset(e_subset, status == "0"), aes(x=samp2, y=samp1), alpha = 0.2, shape = ".") + 
  geom_point(data=subset(e_subset, status == "1"), aes(x=samp2, y=samp1), colour=cols[2], alpha = 0.3) + 
  geom_point(data=subset(e_subset, status == "2"), aes(x=samp2, y=samp1), colour=cols[3], alpha = 0.3) +
  geom_point(data=subset(e_subset, status == "3"), aes(x=samp2, y=samp1), colour=cols[4], alpha = 0.3) +
  geom_text_repel(data=subset(e_subset, status == "3"), aes(x=samp2, y=samp1, label=geneSymbol), point.padding = NA) +
  xlim(c(-2.5,2.5)) +
  ylim(c(-2.5,2.5)) +
  labs(title = title) + 
  xlab(name2) + ylab(name1) + 
  theme_bw() +
  theme(axis.text=element_text(size=16,face="bold"),
        axis.title=element_text(size=8,face="bold"))
ggsave(scatter_plot_3_name, device="jpeg")

html_folder <- paste("p53_dep_scatter_Ribo_vs_RNA", "_", title, sep="")
html_file_name <- paste("p53_dep_scatter_Ribo_vs_RNA", "_", title, sep="")
glXYPlot(x=efit_rna[,i]$coefficients, y=efit_ribo[,j]$coefficients, xlab=name2, ylab=name1, 
         status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_te$genes, main=title,
         counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)



# 
# # Plot contrast vs. features
# # Length vs. changes in expression
# feature_ind <- c(11:14) # These are indices in efit_te$genes for numbers of interest
# 
# # Plot RNA vs. feature changes
# for(i in 1:length(cont_vec_rna)){
#   for(j in feature_ind){
#     name1 <- colnames(efit_rna$genes[j])
#     name2 <- cont_vec_rna[i]
#     title <- paste(name1, "against", name2, sep="_")
#     
#     # 0 no change
#     # 1 change in RNA
#     dt2 <- rep(0, nrow(dt_rna))
#     dt2[dt_rna[,i]!=0] <- 1
#     table(dt2)
#     dt2 <- data.frame(dt2)
#     dt2[,1] <- as.factor(dt2[,1])
#     rownames(dt2) <- efit_rna$genes$gene_ID
#     
#     coef1 <- paste("coef", name1, sep="_")
#     pval1 <- paste("pval", name1, sep="_")
#     feat2 <- paste("pval", name2, sep="_")
#     dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, pval1, feat2, "status")
#     dt_output <- data.frame(efit_rna$genes$gene_ID, efit_rna$genes$geneSymbol, 
#                             efit_rna[,i]$coefficients, efit_rna[,i]$p.value, 
#                             efit_rna[,i]$genes[,j], dt2[,1])
#     colnames(dt_output) <- dt_output_col_names
#     f_out_name <- paste("table_feature_vs_RNA", "_", name1, "_", name2, ".csv", sep="")
#     write.csv(dt_output, file=f_out_name, row.names=FALSE)
#     
#     col <- brewer.pal(4, "Set1")
#     cols <- c("grey", col[1], col[2], col[4])
#     cols <- cols[1:nlevels(dt2[,1])]
#     
#     #Figure quality scatter plot with labels
#     scatter_plot_2_name <- paste("scatter_2_feature_vs_RNA", "_", title, ".jpeg", sep="")
#     e_subset <- data.frame(log10(efit_rna[,i]$genes[,j]), efit_rna[,i]$coefficients, dt2[,1], efit_rna[,i]$genes$geneSymbol)
#     colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     
#     lix <- is.infinite(e_subset$feat2) | is.infinite(e_subset$samp1)
#     spearman_cor <- cor(e_subset$feat2[!lix], e_subset$samp1[!lix], method = "spearman", use = "complete.obs")
#     cor_name <- paste("cor_feature_vs_RNA", "_", title, ".txt", sep="")
#     write(spearman_cor, file=cor_name)
#     
#     p <- ggplot(e_subset) + 
#       geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#       geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#       # xlim(c(-4,4)) + 
#       # ylim(c(-2.5,2.5)) +
#       labs(title = title) + 
#       xlab(name1) + ylab(name2) + 
#       theme_bw() +
#       theme(axis.text=element_text(size=16,face="bold"),
#             axis.title=element_text(size=8,face="bold"))
#     ggsave(scatter_plot_2_name, device="jpeg")
#     
#     #Figure quality scatter plot with labels
#     # scatter_plot_3_name <- paste("scatter_3_feature_vs_RNA", "_", title, ".jpeg", sep="")
#     # e_subset <- data.frame(log10(efit_rna[,i]$genes[,j]), efit_rna[,i]$coefficients, dt2[,1], efit_rna[,i]$genes$geneSymbol)
#     # colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     # p <- ggplot(e_subset) + 
#     #   geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#     #   geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#     #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1, label=geneSymbol), point.padding = NA) + 
#     #   # xlim(c(-4,4)) + 
#     #   # ylim(c(-2.5,2.5)) +
#     #   labs(title = title) + 
#     #   xlab(name1) + ylab(name2) + 
#     #   theme_bw() +
#     #   theme(axis.text=element_text(size=16,face="bold"),
#     #         axis.title=element_text(size=8,face="bold"))
#     # ggsave(scatter_plot_3_name, device="jpeg")
#     
#     html_folder <- paste("scatter_feature_vs_RNA", "_", title, sep="")
#     html_file_name <- paste("scatter_feature_vs_RNA", "_", title, sep="")
#     glXYPlot(x=log10(efit_rna[,i]$genes[,j]), y=efit_rna[,i]$coefficients, xlab=name1, ylab=name2, 
#              status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_rna$genes, main=title,
#              counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
#   }
# }
# 
# # Plot Ribo vs. feature changes
# for(i in 1:length(cont_vec_ribo)){
#   for(j in feature_ind){
#     name1 <- colnames(efit_ribo$genes[j])
#     name2 <- cont_vec_ribo[i]
#     title <- paste(name1, "against", name2, sep="_")
#     
#     # 0 no change
#     # 1 change in Ribo
#     dt2 <- rep(0, nrow(dt_ribo))
#     dt2[dt_ribo[,i]!=0] <- 1
#     table(dt2)
#     dt2 <- data.frame(dt2)
#     dt2[,1] <- as.factor(dt2[,1])
#     rownames(dt2) <- efit_ribo$genes$gene_ID
#     
#     coef1 <- paste("coef", name1, sep="_")
#     pval1 <- paste("pval", name1, sep="_")
#     feat2 <- paste("pval", name2, sep="_")
#     dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, pval1, feat2, "status")
#     dt_output <- data.frame(efit_ribo$genes$gene_ID, efit_ribo$genes$geneSymbol, 
#                             efit_ribo[,i]$coefficients, efit_ribo[,i]$p.value, 
#                             efit_ribo[,i]$genes[,j], dt2[,1])
#     colnames(dt_output) <- dt_output_col_names
#     f_out_name <- paste("table_feature_vs_Ribo", "_", name1, "_", name2, ".csv", sep="")
#     write.csv(dt_output, file=f_out_name, row.names=FALSE)
#     
#     col <- brewer.pal(4, "Set1")
#     cols <- c("grey", col[1], col[2], col[4])
#     cols <- cols[1:nlevels(dt2[,1])]
#     
#     #Figure quality scatter plot with labels
#     scatter_plot_2_name <- paste("scatter_2_feature_vs_Ribo", "_", title, ".jpeg", sep="")
#     e_subset <- data.frame(log10(efit_ribo[,i]$genes[,j]), efit_ribo[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
#     colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     
#     lix <- is.infinite(e_subset$feat2) | is.infinite(e_subset$samp1)
#     spearman_cor <- cor(e_subset$feat2[!lix], e_subset$samp1[!lix], method = "spearman", use = "complete.obs")
#     cor_name <- paste("cor_feature_vs_Ribo", "_", title, ".txt", sep="")
#     write(spearman_cor, file=cor_name)
#     
#     p <- ggplot(e_subset) + 
#       geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#       geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#       # xlim(c(-4,4)) + 
#       # ylim(c(-2.5,2.5)) +
#       labs(title = title) + 
#       xlab(name1) + ylab(name2) + 
#       theme_bw() +
#       theme(axis.text=element_text(size=16,face="bold"),
#             axis.title=element_text(size=8,face="bold"))
#     ggsave(scatter_plot_2_name, device="jpeg")
#     
#     #Figure quality scatter plot with labels
#     # scatter_plot_3_name <- paste("scatter_3_feature_vs_Ribo", "_", title, ".jpeg", sep="")
#     # e_subset <- data.frame(log10(efit_ribo[,i]$genes[,j]), efit_ribo[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
#     # colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     # p <- ggplot(e_subset) + 
#     #   geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#     #   geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#     #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1, label=geneSymbol), point.padding = NA) + 
#     #   # xlim(c(-4,4)) + 
#     #   # ylim(c(-2.5,2.5)) +
#     #   labs(title = title) + 
#     #   xlab(name1) + ylab(name2) + 
#     #   theme_bw() +
#     #   theme(axis.text=element_text(size=16,face="bold"),
#     #         axis.title=element_text(size=8,face="bold"))
#     # ggsave(scatter_plot_3_name, device="jpeg")
#     
#     html_folder <- paste("scatter_feature_vs_Ribo", "_", title, sep="")
#     html_file_name <- paste("scatter_feature_vs_Ribo", "_", title, sep="")
#     glXYPlot(x=log10(efit_ribo[,i]$genes[,j]), y=efit_ribo[,i]$coefficients, xlab=name1, ylab=name2, 
#              status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_ribo$genes, main=title,
#              counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
#   }
# }
# 
# # Plot TE vs. feature changes
# for(i in 1:length(cont_vec_te)){
#   for(j in feature_ind){
#     name1 <- colnames(efit_te$genes[j])
#     name2 <- cont_vec_te[i]
#     title <- paste(name1, "against", name2, sep="_")
#     
#     # 0 no change
#     # 1 change in TE
#     dt2 <- rep(0, nrow(dt_te))
#     dt2[dt_te[,i]!=0] <- 1
#     table(dt2)
#     dt2 <- data.frame(dt2)
#     dt2[,1] <- as.factor(dt2[,1])
#     rownames(dt2) <- efit_te$genes$gene_ID
#     
#     coef1 <- paste("coef", name1, sep="_")
#     pval1 <- paste("pval", name1, sep="_")
#     feat2 <- paste("pval", name2, sep="_")
#     dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, pval1, feat2, "status")
#     dt_output <- data.frame(efit_te$genes$gene_ID, efit_te$genes$geneSymbol, 
#                             efit_te[,i]$coefficients, efit_te[,i]$p.value, 
#                             efit_te[,i]$genes[,j], dt2[,1])
#     colnames(dt_output) <- dt_output_col_names
#     f_out_name <- paste("table_feature_vs_TE", "_", name1, "_", name2, ".csv", sep="")
#     write.csv(dt_output, file=f_out_name, row.names=FALSE)
#     
#     col <- brewer.pal(4, "Set1")
#     cols <- c("grey", col[1], col[2], col[4])
#     cols <- cols[1:nlevels(dt2[,1])]
#     
#     #Figure quality scatter plot with labels
#     scatter_plot_2_name <- paste("scatter_2_feature_vs_TE", "_", title, ".jpeg", sep="")
#     e_subset <- data.frame(log10(efit_te[,i]$genes[,j]), efit_te[,i]$coefficients, dt2[,1], efit_te[,i]$genes$geneSymbol)
#     colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     
#     lix <- is.infinite(e_subset$feat2) | is.infinite(e_subset$samp1)
#     spearman_cor <- cor(e_subset$feat2[!lix], e_subset$samp1[!lix], method = "spearman", use = "complete.obs")
#     cor_name <- paste("cor_feature_vs_TE", "_", title, ".txt", sep="")
#     write(spearman_cor, file=cor_name)
#     
#     p <- ggplot(e_subset) + 
#       geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#       geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#       # xlim(c(-4,4)) + 
#       # ylim(c(-2.5,2.5)) +
#       labs(title = title) + 
#       xlab(name1) + ylab(name2) + 
#       theme_bw() +
#       theme(axis.text=element_text(size=16,face="bold"),
#             axis.title=element_text(size=8,face="bold"))
#     ggsave(scatter_plot_2_name, device="jpeg")
#     
#     #Figure quality scatter plot with labels
#     # scatter_plot_3_name <- paste("scatter_3_feature_vs_TE", "_", title, ".jpeg", sep="")
#     # e_subset <- data.frame(log10(efit_te[,i]$genes[,j]), efit_te[,i]$coefficients, dt2[,1], efit_te[,i]$genes$geneSymbol)
#     # colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     # p <- ggplot(e_subset) + 
#     #   geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#     #   geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#     #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1, label=geneSymbol), point.padding = NA) + 
#     #   # xlim(c(-4,4)) + 
#     #   # ylim(c(-2.5,2.5)) +
#     #   labs(title = title) + 
#     #   xlab(name1) + ylab(name2) + 
#     #   theme_bw() +
#     #   theme(axis.text=element_text(size=16,face="bold"),
#     #         axis.title=element_text(size=8,face="bold"))
#     # ggsave(scatter_plot_3_name, device="jpeg")
#     
#     html_folder <- paste("scatter_feature_vs_TE", "_", title, sep="")
#     html_file_name <- paste("scatter_feature_vs_TE", "_", title, sep="")
#     glXYPlot(x=log10(efit_te[,i]$genes[,j]), y=efit_te[,i]$coefficients, xlab=name1, ylab=name2, 
#              status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_te$genes, main=title,
#              counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
#   }
# }
# 
# # GC_content vs. changes in expression
# feature_ind <- 15:19 # These are indices in efit_te$genes for numbers of interest
# 
# # Plot RNA vs. feature changes
# for(i in 1:length(cont_vec_rna)){
#   for(j in feature_ind){
#     name1 <- colnames(efit_rna$genes[j])
#     name2 <- cont_vec_rna[i]
#     title <- paste(name1, "against", name2, sep="_")
#     
#     # 0 no change
#     # 1 change in RNA
#     dt2 <- rep(0, nrow(dt_rna))
#     dt2[dt_rna[,i]!=0] <- 1
#     table(dt2)
#     dt2 <- data.frame(dt2)
#     dt2[,1] <- as.factor(dt2[,1])
#     rownames(dt2) <- efit_rna$genes$gene_ID
#     
#     coef1 <- paste("coef", name1, sep="_")
#     pval1 <- paste("pval", name1, sep="_")
#     feat2 <- paste("pval", name2, sep="_")
#     dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, pval1, feat2, "status")
#     dt_output <- data.frame(efit_rna$genes$gene_ID, efit_rna$genes$geneSymbol, 
#                             efit_rna[,i]$coefficients, efit_rna[,i]$p.value, 
#                             efit_rna[,i]$genes[,j], dt2[,1])
#     colnames(dt_output) <- dt_output_col_names
#     f_out_name <- paste("table_feature_vs_RNA", "_", name1, "_", name2, ".csv", sep="")
#     write.csv(dt_output, file=f_out_name, row.names=FALSE)
#     
#     col <- brewer.pal(4, "Set1")
#     cols <- c("grey", col[1], col[2], col[4])
#     cols <- cols[1:nlevels(dt2[,1])]
#     
#     #Figure quality scatter plot with labels
#     scatter_plot_2_name <- paste("scatter_2_feature_vs_RNA", "_", title, ".jpeg", sep="")
#     e_subset <- data.frame(efit_rna[,i]$genes[,j], efit_rna[,i]$coefficients, dt2[,1], efit_rna[,i]$genes$geneSymbol)
#     colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     
#     lix <- is.infinite(e_subset$feat2) | is.infinite(e_subset$samp1)
#     spearman_cor <- cor(e_subset$feat2[!lix], e_subset$samp1[!lix], method = "spearman", use = "complete.obs")
#     cor_name <- paste("cor_feature_vs_RNA", "_", title, ".txt", sep="")
#     write(spearman_cor, file=cor_name)
#     
#     p <- ggplot(e_subset) + 
#       geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#       geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#       xlim(c(0,1)) + 
#       # ylim(c(-2.5,2.5)) +
#       labs(title = title) + 
#       xlab(name1) + ylab(name2) + 
#       theme_bw() +
#       theme(axis.text=element_text(size=16,face="bold"),
#             axis.title=element_text(size=8,face="bold"))
#     ggsave(scatter_plot_2_name, device="jpeg")
#     
#     #Figure quality scatter plot with labels
#     # scatter_plot_3_name <- paste("scatter_3_feature_vs_RNA", "_", title, ".jpeg", sep="")
#     # e_subset <- data.frame(efit_rna[,i]$genes[,j], efit_rna[,i]$coefficients, dt2[,1], efit_rna[,i]$genes$geneSymbol)
#     # colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     # p <- ggplot(e_subset) + 
#     #   geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#     #   geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#     #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1, label=geneSymbol), point.padding = NA) + 
#     #   # xlim(c(-4,4)) + 
#     #   # ylim(c(-2.5,2.5)) +
#     #   labs(title = title) + 
#     #   xlab(name1) + ylab(name2) + 
#     #   theme_bw() +
#     #   theme(axis.text=element_text(size=16,face="bold"),
#     #         axis.title=element_text(size=8,face="bold"))
#     # ggsave(scatter_plot_3_name, device="jpeg")
#     
#     html_folder <- paste("scatter_feature_vs_RNA", "_", title, sep="")
#     html_file_name <- paste("scatter_feature_vs_RNA", "_", title, sep="")
#     glXYPlot(x=log10(efit_rna[,i]$genes[,j]), y=efit_rna[,i]$coefficients, xlab=name1, ylab=name2, 
#              status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_rna$genes, main=title,
#              counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
#   }
# }
# 
# # Plot Ribo vs. feature changes
# for(i in 1:length(cont_vec_ribo)){
#   for(j in feature_ind){
#     name1 <- colnames(efit_ribo$genes[j])
#     name2 <- cont_vec_ribo[i]
#     title <- paste(name1, "against", name2, sep="_")
#     
#     # 0 no change
#     # 1 change in Ribo
#     dt2 <- rep(0, nrow(dt_ribo))
#     dt2[dt_ribo[,i]!=0] <- 1
#     table(dt2)
#     dt2 <- data.frame(dt2)
#     dt2[,1] <- as.factor(dt2[,1])
#     rownames(dt2) <- efit_ribo$genes$gene_ID
#     
#     coef1 <- paste("coef", name1, sep="_")
#     pval1 <- paste("pval", name1, sep="_")
#     feat2 <- paste("pval", name2, sep="_")
#     dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, pval1, feat2, "status")
#     dt_output <- data.frame(efit_ribo$genes$gene_ID, efit_ribo$genes$geneSymbol, 
#                             efit_ribo[,i]$coefficients, efit_ribo[,i]$p.value, 
#                             efit_ribo[,i]$genes[,j], dt2[,1])
#     colnames(dt_output) <- dt_output_col_names
#     f_out_name <- paste("table_feature_vs_Ribo", "_", name1, "_", name2, ".csv", sep="")
#     write.csv(dt_output, file=f_out_name, row.names=FALSE)
#     
#     col <- brewer.pal(4, "Set1")
#     cols <- c("grey", col[1], col[2], col[4])
#     cols <- cols[1:nlevels(dt2[,1])]
#     
#     #Figure quality scatter plot with labels
#     scatter_plot_2_name <- paste("scatter_2_feature_vs_Ribo", "_", title, ".jpeg", sep="")
#     e_subset <- data.frame(efit_ribo[,i]$genes[,j], efit_ribo[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
#     colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     
#     lix <- is.infinite(e_subset$feat2) | is.infinite(e_subset$samp1)
#     spearman_cor <- cor(e_subset$feat2[!lix], e_subset$samp1[!lix], method = "spearman", use = "complete.obs")
#     cor_name <- paste("cor_feature_vs_Ribo", "_", title, ".txt", sep="")
#     write(spearman_cor, file=cor_name)
#     
#     p <- ggplot(e_subset) + 
#       geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#       geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#       xlim(c(0,1)) + 
#       # ylim(c(-2.5,2.5)) +
#       labs(title = title) + 
#       xlab(name1) + ylab(name2) + 
#       theme_bw() +
#       theme(axis.text=element_text(size=16,face="bold"),
#             axis.title=element_text(size=8,face="bold"))
#     ggsave(scatter_plot_2_name, device="jpeg")
#     
#     #Figure quality scatter plot with labels
#     # scatter_plot_3_name <- paste("scatter_3_feature_vs_Ribo", "_", title, ".jpeg", sep="")
#     # e_subset <- data.frame(efit_ribo[,i]$genes[,j], efit_ribo[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
#     # colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     # p <- ggplot(e_subset) + 
#     #   geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#     #   geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#     #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1, label=geneSymbol), point.padding = NA) + 
#     #   # xlim(c(-4,4)) + 
#     #   # ylim(c(-2.5,2.5)) +
#     #   labs(title = title) + 
#     #   xlab(name1) + ylab(name2) + 
#     #   theme_bw() +
#     #   theme(axis.text=element_text(size=16,face="bold"),
#     #         axis.title=element_text(size=8,face="bold"))
#     # ggsave(scatter_plot_3_name, device="jpeg")
#     
#     html_folder <- paste("scatter_feature_vs_Ribo", "_", title, sep="")
#     html_file_name <- paste("scatter_feature_vs_Ribo", "_", title, sep="")
#     glXYPlot(x=log10(efit_ribo[,i]$genes[,j]), y=efit_ribo[,i]$coefficients, xlab=name1, ylab=name2, 
#              status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_ribo$genes, main=title,
#              counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
#   }
# }
# 
# # Plot TE vs. feature changes
# for(i in 1:length(cont_vec_te)){
#   for(j in feature_ind){
#     name1 <- colnames(efit_te$genes[j])
#     name2 <- cont_vec_te[i]
#     title <- paste(name1, "against", name2, sep="_")
#     
#     # 0 no change
#     # 1 change in TE
#     dt2 <- rep(0, nrow(dt_te))
#     dt2[dt_te[,i]!=0] <- 1
#     table(dt2)
#     dt2 <- data.frame(dt2)
#     dt2[,1] <- as.factor(dt2[,1])
#     rownames(dt2) <- efit_te$genes$gene_ID
#     
#     coef1 <- paste("coef", name1, sep="_")
#     pval1 <- paste("pval", name1, sep="_")
#     feat2 <- paste("pval", name2, sep="_")
#     dt_output_col_names <- c("gene_ID", "geneSymbol", coef1, pval1, feat2, "status")
#     dt_output <- data.frame(efit_te$genes$gene_ID, efit_te$genes$geneSymbol, 
#                             efit_te[,i]$coefficients, efit_te[,i]$p.value, 
#                             efit_te[,i]$genes[,j], dt2[,1])
#     colnames(dt_output) <- dt_output_col_names
#     f_out_name <- paste("table_feature_vs_TE", "_", name1, "_", name2, ".csv", sep="")
#     write.csv(dt_output, file=f_out_name, row.names=FALSE)
#     
#     col <- brewer.pal(4, "Set1")
#     cols <- c("grey", col[1], col[2], col[4])
#     cols <- cols[1:nlevels(dt2[,1])]
#     
#     #Figure quality scatter plot with labels
#     scatter_plot_2_name <- paste("scatter_2_feature_vs_TE", "_", title, ".jpeg", sep="")
#     e_subset <- data.frame(efit_te[,i]$genes[,j], efit_te[,i]$coefficients, dt2[,1], efit_te[,i]$genes$geneSymbol)
#     colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     
#     lix <- is.infinite(e_subset$feat2) | is.infinite(e_subset$samp1)
#     spearman_cor <- cor(e_subset$feat2[!lix], e_subset$samp1[!lix], method = "spearman", use = "complete.obs")
#     cor_name <- paste("cor_feature_vs_TE", "_", title, ".txt", sep="")
#     write(spearman_cor, file=cor_name)
#     
#     p <- ggplot(e_subset) + 
#       geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#       geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#       xlim(c(0,1)) + 
#       # ylim(c(-2.5,2.5)) +
#       labs(title = title) + 
#       xlab(name1) + ylab(name2) + 
#       theme_bw() +
#       theme(axis.text=element_text(size=16,face="bold"),
#             axis.title=element_text(size=8,face="bold"))
#     ggsave(scatter_plot_2_name, device="jpeg")
#     
#     #Figure quality scatter plot with labels
#     # scatter_plot_3_name <- paste("scatter_3_feature_vs_TE", "_", title, ".jpeg", sep="")
#     # e_subset <- data.frame(efit_te[,i]$genes[,j], efit_te[,i]$coefficients, dt2[,1], efit_te[,i]$genes$geneSymbol)
#     # colnames(e_subset) <- c("feat2", "samp1", "status", "geneSymbol")
#     # p <- ggplot(e_subset) + 
#     #   geom_point(data=subset(e_subset, status == "0"), aes(x=feat2, y=samp1), alpha = 0.1) + 
#     #   geom_point(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1), colour=cols[2], alpha = 0.6) + 
#     #   geom_text_repel(data=subset(e_subset, status == "1"), aes(x=feat2, y=samp1, label=geneSymbol), point.padding = NA) + 
#     #   # xlim(c(-4,4)) + 
#     #   # ylim(c(-2.5,2.5)) +
#     #   labs(title = title) + 
#     #   xlab(name1) + ylab(name2) + 
#     #   theme_bw() +
#     #   theme(axis.text=element_text(size=16,face="bold"),
#     #         axis.title=element_text(size=8,face="bold"))
#     # ggsave(scatter_plot_3_name, device="jpeg")
#     
#     html_folder <- paste("scatter_feature_vs_TE", "_", title, sep="")
#     html_file_name <- paste("scatter_feature_vs_TE", "_", title, sep="")
#     glXYPlot(x=log10(efit_te[,i]$genes[,j]), y=efit_te[,i]$coefficients, xlab=name1, ylab=name2, 
#              status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_te$genes, main=title,
#              counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)
#   }
# }


# Group by FDR levels and plot against various features
# colnames(efit_te) 
# [1] "s6het_p53wt_TE_vs_s6wt_p53wt_TE"
# [2] "s6het_p53null_TE_vs_s6wt_p53null_TE"
cont_vec_ind_subset <- c(1,2)

# colnames(res_table)
# indices for features of interest that need to be logged (length)
feature_ind_log <- c(11:14)
# indices for features of interest that don't need to be logged
feature_ind_nolog <- c(15:22)
# indices for features of interest that need to be absolute valued then logged then *-1 (foldUTR_mfe)
feature_ind_abs_log <- c(3:4)

for(i in cont_vec_ind_subset){
  for(j in feature_ind_log){
    res_table <- topTable(efit_te, coef=i, n=Inf)
    df_res_table <- data.frame(res_table)
    df_res_table$fdr_groups <- 1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC<0)] <- -0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC<0)] <- -0.1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC>0)] <- 0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC>0)] <- 0.1
    df_res_table$fdr_groups <- factor(df_res_table$fdr_groups)
    
    df_res_table_subset <- data.frame(df_res_table$gene_ID, df_res_table$geneSymbol, df_res_table$fdr_groups, as.numeric(df_res_table[,j]))
    colnames(df_res_table_subset) <- c("gene_ID", "geneSymbol", "fdr_groups", "feature_value")
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups)
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups, levels(df_res_table_subset$fdr_groups)[c(2,1,5,4,3)])
    
    # take log(abs())
    df_res_table_subset$feature_value <- log2(abs(df_res_table_subset$feature_value))
    
    title_feature <- colnames(df_res_table)[j]
    title_cont <- colnames(efit_te)[i]
    violin_plot_name <- paste("violin_fdr_groups", "_", title_cont, "_", title_feature, ".jpeg", sep="")
    p <- ggplot(df_res_table_subset) + geom_violin(aes(x=fdr_groups, y=feature_value, fill=fdr_groups))
    # p <- p + scale_y_continuous(limits = c(-2, 2))
    p <- p + theme_bw()
    p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
                   axis.text.y = element_text(size=16, face="bold"))
    p
    ggsave(violin_plot_name, plot=p, device="jpeg")
    
    wilcox_test_name <- paste("wilcox_test", "_", title_cont, "_", title_feature, ".txt", sep="")
    sink(wilcox_test_name)
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    sink()
  }
  
  for(k in feature_ind_nolog){
    res_table <- topTable(efit_te, coef=i, n=Inf)
    df_res_table <- data.frame(res_table)
    df_res_table$fdr_groups <- 1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC<0)] <- -0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC<0)] <- -0.1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC>0)] <- 0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC>0)] <- 0.1
    df_res_table$fdr_groups <- factor(df_res_table$fdr_groups)
    
    df_res_table_subset <- data.frame(df_res_table$gene_ID, df_res_table$geneSymbol, df_res_table$fdr_groups, as.numeric(df_res_table[,k]))
    colnames(df_res_table_subset) <- c("gene_ID", "geneSymbol", "fdr_groups", "feature_value")
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups)
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups, levels(df_res_table_subset$fdr_groups)[c(2,1,5,4,3)])
    
    title_feature <- colnames(df_res_table)[k]
    title_cont <- colnames(efit_te)[i]
    violin_plot_name <- paste("violin_fdr_groups", "_", title_cont, "_", title_feature, ".jpeg", sep="")
    p <- ggplot(df_res_table_subset) + geom_violin(aes(x=fdr_groups, y=feature_value, fill=fdr_groups))
    # p <- p + scale_y_continuous(limits = c(-2, 2))
    p <- p + theme_bw()
    p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
                   axis.text.y = element_text(size=16, face="bold"))
    p
    ggsave(violin_plot_name, plot=p, device="jpeg")
    
    wilcox_test_name <- paste("wilcox_test", "_", title_cont, "_", title_feature, ".txt", sep="")
    sink(wilcox_test_name)
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    sink()
  }
  
  for(l in feature_ind_abs_log){
    res_table <- topTable(efit_te, coef=i, n=Inf)
    df_res_table <- data.frame(res_table)
    df_res_table$fdr_groups <- 1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC<0)] <- -0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC<0)] <- -0.1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC>0)] <- 0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC>0)] <- 0.1
    df_res_table$fdr_groups <- factor(df_res_table$fdr_groups)
    
    df_res_table_subset <- data.frame(df_res_table$gene_ID, df_res_table$geneSymbol, df_res_table$fdr_groups, as.numeric(df_res_table[,l]))
    colnames(df_res_table_subset) <- c("gene_ID", "geneSymbol", "fdr_groups", "feature_value")
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups)
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups, levels(df_res_table_subset$fdr_groups)[c(2,1,5,4,3)])
    
    # take -1*log(abs())
    df_res_table_subset$feature_value <- -1*log2(abs(df_res_table_subset$feature_value))
    
    title_feature <- colnames(df_res_table)[l]
    title_cont <- colnames(efit_te)[i]
    violin_plot_name <- paste("violin_fdr_groups", "_", title_cont, "_", title_feature, ".jpeg", sep="")
    p <- ggplot(df_res_table_subset) + geom_violin(aes(x=fdr_groups, y=feature_value, fill=fdr_groups))
    # p <- p + scale_y_continuous(limits = c(-2, 2))
    p <- p + theme_bw()
    p <- p + theme(axis.text.x = element_text(size=7, angle = 90, hjust = 1), 
                   axis.text.y = element_text(size=16, face="bold"))
    p
    ggsave(violin_plot_name, plot=p, device="jpeg")
    
    wilcox_test_name <- paste("wilcox_test", "_", title_cont, "_", title_feature, ".txt", sep="")
    sink(wilcox_test_name)
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    sink()
  }
}

###################################
# 20190607 I AM HERE
# Figure quality figures
# http://www.christoph-scherber.de/content/PDF%20Files/Scherber%202012%20Using%20R%20in%20combination%20with%20Adobe%20Illustrator%20CS6.pdf
# subset cont_vec_ribo
cont_vec_ribo_subset <- cont_vec_ribo[c(1:3)]

for(i in 1:length(cont_vec_ribo_subset)){
  name <- cont_vec_ribo_subset[i]

  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_ribo[,i]$Amean, efit_ribo[,i]$coefficients, dt_ribo[,i])
  colnames(df_ma) <- c("Amean", "coefficients", "status")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    ylim(c(-7.5,7.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}

# subset cont_vec_rna
cont_vec_rna_subset <- cont_vec_rna[c(1:3)]

for(i in 1:length(cont_vec_rna_subset)){
  name <- cont_vec_rna_subset[i]
  
  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_rna[,i]$Amean, efit_rna[,i]$coefficients, dt_rna[,i])
  colnames(df_ma) <- c("Amean", "coefficients", "status")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    ylim(c(-7.5,7.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}

# subset cont_vec_te
cont_vec_te_subset <- cont_vec_te[c(1:3)]

for(i in 1:length(cont_vec_te_subset)){
  name <- cont_vec_te_subset[i]
  
  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_te[,i]$Amean, efit_te[,i]$coefficients, dt_te[,i])
  colnames(df_ma) <- c("Amean", "coefficients", "status")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    ylim(c(-2.5,2.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}

# Figure quality MA plots with labels - p53-dependent
###################################
# 20190802 I AM HERE
# Figure quality figures
# http://www.christoph-scherber.de/content/PDF%20Files/Scherber%202012%20Using%20R%20in%20combination%20with%20Adobe%20Illustrator%20CS6.pdf
# Define p53-dependent
p53_dep_vec <- c("Col2a1", "Dicer1", "Gli2", "Megf8")

# subset cont_vec_ribo
cont_vec_ribo_subset <- cont_vec_ribo[c(1:3)]

for(i in 1:length(cont_vec_ribo_subset)){
  name <- cont_vec_ribo_subset[i]
  
  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final_p53_dep", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_ribo[,i]$Amean, efit_ribo[,i]$coefficients, dt_ribo[,i], efit_ribo$genes$geneSymbol)
  colnames(df_ma) <- c("Amean", "coefficients", "status", "geneSymbol")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients > 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = 7.5 - subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients > 0))$coefficients,
                    point.padding = NA) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients < 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = -7.5 - subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients < 0))$coefficients,
                    point.padding = NA) +
    ylim(c(-7.5,7.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}

# subset cont_vec_rna
cont_vec_rna_subset <- cont_vec_rna[c(1:3)]

for(i in 1:length(cont_vec_rna_subset)){
  name <- cont_vec_rna_subset[i]
  
  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final_p53_dep", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_rna[,i]$Amean, efit_rna[,i]$coefficients, dt_rna[,i], efit_rna$genes$geneSymbol)
  colnames(df_ma) <- c("Amean", "coefficients", "status", "geneSymbol")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients > 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = 7.5 - subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients > 0))$coefficients,
                    point.padding = NA) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients < 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = -7.5 - subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients < 0))$coefficients,
                    point.padding = NA) +
    ylim(c(-7.5,7.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}

# subset cont_vec_te
cont_vec_te_subset <- cont_vec_te[c(1:3)]

for(i in 1:length(cont_vec_te_subset)){
  name <- cont_vec_te_subset[i]
  
  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final_p53_dep", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_te[,i]$Amean, efit_te[,i]$coefficients, dt_te[,i], efit_te$genes$geneSymbol)
  colnames(df_ma) <- c("Amean", "coefficients", "status", "geneSymbol")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients > 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = 2.5 - subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients > 0))$coefficients,
                    point.padding = NA) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients < 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = -2.5 - subset(df_ma, (geneSymbol %in% p53_dep_vec) & (coefficients < 0))$coefficients,
                    point.padding = NA) +
    ylim(c(-2.5,2.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}

# Figure quality MA plots with labels - p53-independent
###################################
# 20190802 I AM HERE
# Figure quality figures
# http://www.christoph-scherber.de/content/PDF%20Files/Scherber%202012%20Using%20R%20in%20combination%20with%20Adobe%20Illustrator%20CS6.pdf
# Define p53-independent
p53_indep_vec <- c("Rps5", "Rps14", "Rps19", "Rpl18a", "Rpl27a", "Rpl39", "Mdm4", "Rnf10", "Ifrd1")

# subset cont_vec_ribo
cont_vec_ribo_subset <- cont_vec_ribo[c(1:3)]

for(i in 1:length(cont_vec_ribo_subset)){
  name <- cont_vec_ribo_subset[i]
  
  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final_p53_indep", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_ribo[,i]$Amean, efit_ribo[,i]$coefficients, dt_ribo[,i], efit_ribo$genes$geneSymbol)
  colnames(df_ma) <- c("Amean", "coefficients", "status", "geneSymbol")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients > 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = 7.5 - subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients > 0))$coefficients,
                    point.padding = NA) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients < 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = -7.5 - subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients < 0))$coefficients,
                    point.padding = NA) +
    ylim(c(-7.5,7.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}

# subset cont_vec_rna
cont_vec_rna_subset <- cont_vec_rna[c(1:3)]

for(i in 1:length(cont_vec_rna_subset)){
  name <- cont_vec_rna_subset[i]
  
  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final_p53_indep", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_rna[,i]$Amean, efit_rna[,i]$coefficients, dt_rna[,i], efit_rna$genes$geneSymbol)
  colnames(df_ma) <- c("Amean", "coefficients", "status", "geneSymbol")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients > 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = 7.5 - subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients > 0))$coefficients,
                    point.padding = NA) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients < 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = -7.5 - subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients < 0))$coefficients,
                    point.padding = NA) +
    ylim(c(-7.5,7.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}

# subset cont_vec_te
cont_vec_te_subset <- cont_vec_te[c(1:3)]

for(i in 1:length(cont_vec_te_subset)){
  name <- cont_vec_te_subset[i]
  
  #Figure quality MA plot
  ma_plot_final_name <- paste("ma_plot_final_p53_indep", "_", name, ".pdf", sep="")
  col <- brewer.pal(3, "Set1")
  df_ma <- data.frame(efit_te[,i]$Amean, efit_te[,i]$coefficients, dt_te[,i], efit_te$genes$geneSymbol)
  colnames(df_ma) <- c("Amean", "coefficients", "status", "geneSymbol")
  p <- ggplot(df_ma) + 
    geom_point(data=subset(df_ma, status == "0"), aes(x=Amean, y=coefficients), alpha = 0.4, shape = ".") + 
    geom_point(data=subset(df_ma, status == "1"), aes(x=Amean, y=coefficients), colour=col[1], alpha = 0.3, size=1) + 
    geom_point(data=subset(df_ma, status == "-1"), aes(x=Amean, y=coefficients), colour=col[2], alpha = 0.3, size=1) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients > 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = 2.5 - subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients > 0))$coefficients,
                    point.padding = NA) +
    geom_text_repel(data=subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients < 0)),
                    aes(x=Amean, y=coefficients, label=geneSymbol),
                    size = 2.5,
                    nudge_y = -2.5 - subset(df_ma, (geneSymbol %in% p53_indep_vec) & (coefficients < 0))$coefficients,
                    point.padding = NA) +
    ylim(c(-2.5,2.5)) + 
    theme_bw() +
    theme(axis.text=element_text(size=10,face="bold"),
          axis.title=element_text(size=10,face="bold"))
  ggsave(ma_plot_final_name, device="pdf", useDingbats=FALSE, width=3.75, height=2.5, units="in")
}


### Find best candidate p53 dependent genes
### Find genes that fall in following GO categories that are significant in 
### RPS6het-RPS6wt and have ribo changing in same direction as TE --> 
### then ask if p53 independent --> likely not p53 independent - 
### so what are most high confidence p53 dependent ones (4-way comparison).
## Goal plot Ribo vs. RNA and see things driven by ribo
# Highlight the following:
# 1) Find significant TE change in s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo
# 2) Find significant change in Ribo for s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo
# 3) Subset to find significant change in Ribo for  s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo - don't do this
# Plot Ribo vs. RNA changes
i=1
j=1
name1 <- cont_vec_ribo[i]
# name1 <- "s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo"
name2 <- cont_vec_rna[i]
# name2 <- "s6het_p53wt_RNA_vs_s6wt_p53wt_RNA"
name3 <- cont_vec_te[i]
title <- paste(name1, "against", name2, sep="_")

# See description of block for key
# 0 no change
# 1 change in TE (1)
# 2 change in TE (1) & Ribo (2)
# 3 change in TE (1) & Ribo (2) & Ribo (3)
dt2 <- rep(0, nrow(dt_te))
dt2[dt_te[,i]!=0] <- 1
dt2[(dt_te[,i]!=0) & (dt_ribo[,i]!=0) & 
      ((dt_te[,i]<0 & dt_ribo[,i]<0) | (dt_te[,i]>0 & dt_ribo[,i]>0))] <- 2
# dt2[(dt_te[,i]!=0) & (dt_ribo[,i]!=0) & (dt_ribo[,j]!=0)] <- 3
table(dt2)
dt2 <- data.frame(dt2)
dt2[,1] <- as.factor(dt2[,1])
rownames(dt2) <- efit_te$genes$gene_ID

coef1 <- paste("coef", name1, sep="_")
coef2 <- paste("coef", name2, sep="_")
coef3 <- paste("coef", name3, sep="_")
pval1 <- paste("pval", name1, sep="_")
pval2 <- paste("pval", name2, sep="_")
pval3 <- paste("pval", name3, sep="_")
dt_output_col_names <- c("gene_ID", "geneSymbol", "entrez_id", coef1, pval1, coef2, pval2, coef3, pval3, "status")
dt_output <- data.frame(efit_te$genes$gene_ID, efit_te$genes$geneSymbol, efit_te$genes$entrez_id,
                        efit_ribo[,i]$coefficients, efit_ribo[,j]$p.value, 
                        efit_rna[,i]$coefficients, efit_rna[,j]$p.value, 
                        efit_te[,i]$coefficients, efit_te[,i]$p.value, 
                        dt2[,1])
colnames(dt_output) <- dt_output_col_names
# Name too long for Excel
f_out_name <- paste("ribo_subset_te", "_", name3, ".csv", sep="")
# f_out_name <- paste("p53_dep_table_Ribo_RNA_TE.csv", sep="")
write.csv(dt_output, file=f_out_name, row.names=FALSE)

col <- brewer.pal(4, "Set1")
cols <- c("grey", col[2], col[1])
cols <- cols[1:nlevels(dt2[,1])]

#Figure quality scatter plot without labels
scatter_plot_2_name <- paste("ribo_subset_te_scatter_2", "_", title, ".jpeg", sep="")
e_subset <- data.frame(efit_ribo[,i]$coefficients, efit_rna[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
p <- ggplot(e_subset) + 
  geom_point(data=subset(e_subset, status == "0"), aes(x=samp2, y=samp1), alpha = 0.2, shape = ".") + 
  geom_point(data=subset(e_subset, status == "1"), aes(x=samp2, y=samp1), colour=cols[2], alpha = 0.3) + 
  geom_point(data=subset(e_subset, status == "2"), aes(x=samp2, y=samp1), colour=cols[3], alpha = 0.3) +
#   xlim(c(-4,4)) +
#   ylim(c(-4,4)) +
  labs(title = title) + 
  xlab(name2) + ylab(name1) + 
  theme_bw() +
  theme(axis.text=element_text(size=16,face="bold"),
        axis.title=element_text(size=8,face="bold"))
ggsave(scatter_plot_2_name, device="jpeg")

#Figure quality scatter plot with labels
scatter_plot_3_name <- paste("ribo_subset_te_scatter_3", "_", title, ".jpeg", sep="")
e_subset <- data.frame(efit_ribo[,i]$coefficients, efit_rna[,i]$coefficients, dt2[,1], efit_ribo[,i]$genes$geneSymbol)
colnames(e_subset) <- c("samp1", "samp2", "status", "geneSymbol")
p <- ggplot(e_subset) + 
  geom_point(data=subset(e_subset, status == "0"), aes(x=samp2, y=samp1), alpha = 0.2, shape = ".") + 
  geom_point(data=subset(e_subset, status == "1"), aes(x=samp2, y=samp1), colour=cols[2], alpha = 0.3) + 
  geom_point(data=subset(e_subset, status == "2"), aes(x=samp2, y=samp1), colour=cols[3], alpha = 0.3) +
  geom_text_repel(data=subset(e_subset, status == "2"), aes(x=samp2, y=samp1, label=geneSymbol), point.padding = NA) +
#   xlim(c(-4,4)) +
#   ylim(c(-4,4)) +
  labs(title = title) + 
  xlab(name2) + ylab(name1) + 
  theme_bw() +
  theme(axis.text=element_text(size=16,face="bold"),
        axis.title=element_text(size=8,face="bold"))
ggsave(scatter_plot_3_name, device="jpeg")

html_folder <- paste("ribo_subset_te_scatter", "_", title, sep="")
html_file_name <- paste("ribo_subset_te_scatter", "_", title, sep="")
glXYPlot(x=efit_rna[,i]$coefficients, y=efit_ribo[,j]$coefficients, xlab=name2, ylab=name1, 
         status=dt2[,1], cols=cols, side.main="gene_ID", anno=efit_te$genes, main=title,
         counts=v_te, groups=v_te$targets$genotype, folder=html_folder, html=html_file_name, launch=FALSE)

## Subset genes in following GO categories
# APPENDAGE DEVELOPMENT
# APPENDAGE MORPHOGENESIS
# LIMB DEVELOPMENT
# LIMB MORPHOGENESIS

geneset_subset_boolean <- genesets$geneset.names %in% c("APPENDAGE DEVELOPMENT%GOBP%GO:0048736",
                                                          "APPENDAGE MORPHOGENESIS%GOBP%GO:0035107",
                                                          "LIMB DEVELOPMENT%GOBP%GO:0060173",
                                                          "LIMB MORPHOGENESIS%GOBP%GO:0035108")
geneset_subset_ind <- which(geneset_subset_boolean)
genesets$genesets[geneset_subset_boolean]

go_gene_subset_list <- c()
for(i in geneset_subset_ind){
  go_gene_subset_list <- append(go_gene_subset_list, genesets$genesets[[i]])
}

# Find genes that are significant in RPS6het-RPS6wt and have ribo changing significantly
# that are genes in above GO categories
dt_output_go_subset <- dt_output[(dt_output$entrez_id %in% go_gene_subset_list) & 
                                   (dt_output$status==2),]
f_out_name <- paste("ribo_subset_te_subset_go", "_", name3, ".csv", sep="")
write.csv(dt_output_go_subset, file=f_out_name, row.names=FALSE)

## Ask which of these are significant in "s6het_p53null_TE_vs_s6wt_p53null_TE"
# colnames(dt_te)
# [2] "s6het_p53null_TE_vs_s6wt_p53null_TE"
j=2
dt_output_go_subset_p53_ind <- dt_output_go_subset[dt_output_go_subset$gene_ID %in% rownames(data.frame(dt_te[,j][dt_te[,j]!=0])),]
f_out_name <- paste("ribo_subset_te_subset_go_p53_independent", ".csv", sep="")
write.csv(dt_output_go_subset_p53_ind, file=f_out_name, row.names=FALSE)
# no genes

## Ask which of these are significant in "s6het_p53wt_TE_vs_s6wt_p53wt_TE_minus_s6het_p53null_TE_vs_s6wt_p53null_TE"
# colnames(dt_te)
# [9] "s6het_p53wt_TE_vs_s6wt_p53wt_TE_minus_s6het_p53null_TE_vs_s6wt_p53null_TE"
k=9
dt_output_go_subset_p53_dep <- dt_output_go_subset[dt_output_go_subset$gene_ID %in% rownames(data.frame(dt_te[,k][dt_te[,k]!=0])),]
f_out_name <- paste("ribo_subset_te_subset_go_p53_dependent", ".csv", sep="")
write.csv(dt_output_go_subset_p53_dep, file=f_out_name, row.names=FALSE)

### PLOT 
### Now plot bar plot for following genes (Ribo and RNA change) in 
### s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo and s6het_p53wt_RNA_vs_s6wt_p53wt_RNA
### c("Col2a1", "Dicer1", "Gli2", "Megf8", "Rps5", "Rps14", "Rps19", "Rpl18a", "Rpl27a", "Rpl39", "Rnf10", "Mdm4", "Ifrd1")
### OR c("Col2a1", "Rps14", "Rps19", "Rpl18a", "Rnf10", "Mdm4", "Ifrd1")

ribo_rna_bar_vec <- c("Col2a1", "Dicer1", "Gli2", "Megf8", "Rps5", "Rps14", "Rps19", "Rpl18a", "Rpl27a", "Rpl39", "Rnf10", "Mdm4", "Ifrd1")

dt_output_ribo_rna_bar_1 <- dt_output[dt_output$geneSymbol %in% ribo_rna_bar_vec,]
dt_output_ribo_rna_bar_subset_1 <- data.frame(dt_output_ribo_rna_bar_1$geneSymbol, 
                                              dt_output_ribo_rna_bar_1$coef_s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo,
                                              dt_output_ribo_rna_bar_1$coef_s6het_p53wt_RNA_vs_s6wt_p53wt_RNA)
colnames(dt_output_ribo_rna_bar_subset_1) <- c("geneSymbol", "RPF", "RNA")
dt_output_ribo_rna_bar_subset_1$geneSymbol <- factor(dt_output_ribo_rna_bar_subset_1$geneSymbol) #drop factors

m_dt_output_ribo_rna_bar_subset_1 <- melt(dt_output_ribo_rna_bar_subset_1, 
                                          id=c("geneSymbol"))
# Rearrange factors
geneSymbol_factor <- m_dt_output_ribo_rna_bar_subset_1$geneSymbol
geneSymbol_factor <- factor(geneSymbol_factor, levels(geneSymbol_factor)[c(4,7,5,10,9,8,12,11,13,6,3,2,1)])
m_dt_output_ribo_rna_bar_subset_1$geneSymbol <- geneSymbol_factor

variable_factor <- m_dt_output_ribo_rna_bar_subset_1$variable
variable_factor <- factor(variable_factor, levels(variable_factor)[c(2,1)])
m_dt_output_ribo_rna_bar_subset_1$variable <- variable_factor

# colnames(m_dt_output_ribo_rna_bar_subset_1)
# [1] "geneSymbol" "variable"   "value"  
# Color
col_base <- c("#ffffff", "#000000")
# col_fill <- col_base[rep(c(1,2),nrow(dt_output_ribo_rna_bar_subset_1))]
# col <- c("#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000")

# Create bar plots
exp_bar_plot <- ggplot(data=m_dt_output_ribo_rna_bar_subset_1, aes(x=geneSymbol, y=value, fill=variable)) + 
  geom_bar(stat="identity", color="black", position=position_dodge()) + 
  ylim(-2,2) + 
  theme_pubr() + 
  scale_fill_manual(values=col_base) + 
  theme(legend.position="right")

as_ggplot(get_legend(exp_bar_plot))
ggsave("ribo_rna_bar_plot_s6het_p53wt_vs_s6wt_p53wt_legend.pdf", device="pdf", useDingbats = FALSE)


exp_bar_plot <- exp_bar_plot + 
  coord_flip() + 
  theme(axis.title = element_blank(),
        axis.text.y=element_text(size=10),
        axis.text.x=element_text(size=10),
        legend.position="none")

ggsave("ribo_rna_bar_plot_s6het_p53wt_vs_s6wt_p53wt.pdf", device="pdf", useDingbats = FALSE, width=3, height=2.75, units="in")


#### 20190619 I AM HERE
# Reanalyze but remove filter for ribo significance
# Find genes that are significant in RPS6het-RPS6wt in TE
# that are genes in above GO categories
dt_output_go_subset <- dt_output[(dt_output$entrez_id %in% go_gene_subset_list) & 
                                   (dt_output$status==2 | dt_output$status==1),]
f_out_name <- paste("te_subset_go", "_", name3, ".csv", sep="")
write.csv(dt_output_go_subset, file=f_out_name, row.names=FALSE)

## Ask which of these are significant in "s6het_p53null_TE_vs_s6wt_p53null_TE"
# colnames(dt_te)
# [2] "s6het_p53null_TE_vs_s6wt_p53null_TE"
j=2
dt_output_go_subset_p53_ind <- dt_output_go_subset[dt_output_go_subset$gene_ID %in% rownames(data.frame(dt_te[,j][dt_te[,j]!=0])),]
f_out_name <- paste("te_subset_go_p53_independent", ".csv", sep="")
write.csv(dt_output_go_subset_p53_ind, file=f_out_name, row.names=FALSE)
# no genes

## Ask which of these are significant in "s6het_p53wt_TE_vs_s6wt_p53wt_TE_minus_s6het_p53null_TE_vs_s6wt_p53null_TE"
# colnames(dt_te)
# [9] "s6het_p53wt_TE_vs_s6wt_p53wt_TE_minus_s6het_p53null_TE_vs_s6wt_p53null_TE"
k=9
dt_output_go_subset_p53_dep <- dt_output_go_subset[dt_output_go_subset$gene_ID %in% rownames(data.frame(dt_te[,k][dt_te[,k]!=0])),]
f_out_name <- paste("te_subset_go_p53_dependent", ".csv", sep="")
write.csv(dt_output_go_subset_p53_dep, file=f_out_name, row.names=FALSE)

### PLOT 
### Now plot bar plot for following genes (Ribo and RNA change) in 
### s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo and s6het_p53wt_RNA_vs_s6wt_p53wt_RNA
### c("Col2a1", "Dicer1", "Gli2", "Megf8", "Rps5", "Rps14", "Rps19", "Rpl18a", "Rpl27a", "Rpl39", "Rnf10", "Mdm4", "Ifrd1")
### OR c("Col2a1", "Rps14", "Rps19", "Rpl18a", "Rnf10", "Mdm4", "Ifrd1")

ribo_rna_bar_vec <- c("Col2a1", "Dicer1", "Gli2", "Megf8", "Rps5", "Rps14", "Rps19", "Rpl18a", "Rpl27a", "Rpl39", "Rnf10", "Mdm4", "Ifrd1")

dt_output_ribo_rna_bar_1 <- dt_output[dt_output$geneSymbol %in% ribo_rna_bar_vec,]
dt_output_ribo_rna_bar_subset_1 <- data.frame(dt_output_ribo_rna_bar_1$geneSymbol, 
                                              dt_output_ribo_rna_bar_1$coef_s6het_p53wt_Ribo_vs_s6wt_p53wt_Ribo,
                                              dt_output_ribo_rna_bar_1$coef_s6het_p53wt_RNA_vs_s6wt_p53wt_RNA)
colnames(dt_output_ribo_rna_bar_subset_1) <- c("geneSymbol", "RPF", "RNA")
dt_output_ribo_rna_bar_subset_1$geneSymbol <- factor(dt_output_ribo_rna_bar_subset_1$geneSymbol) #drop factors

m_dt_output_ribo_rna_bar_subset_1 <- melt(dt_output_ribo_rna_bar_subset_1, 
                                          id=c("geneSymbol"))
# Rearrange factors
geneSymbol_factor <- m_dt_output_ribo_rna_bar_subset_1$geneSymbol
geneSymbol_factor <- factor(geneSymbol_factor, levels(geneSymbol_factor)[c(4,7,5,10,9,8,12,11,13,6,3,2,1)])
m_dt_output_ribo_rna_bar_subset_1$geneSymbol <- geneSymbol_factor

variable_factor <- m_dt_output_ribo_rna_bar_subset_1$variable
variable_factor <- factor(variable_factor, levels(variable_factor)[c(2,1)])
m_dt_output_ribo_rna_bar_subset_1$variable <- variable_factor

# colnames(m_dt_output_ribo_rna_bar_subset_1)
# [1] "geneSymbol" "variable"   "value"  
# Color
col_base <- c("#ffffff", "#000000")
# col_fill <- col_base[rep(c(1,2),nrow(dt_output_ribo_rna_bar_subset_1))]
# col <- c("#000000","#000000","#000000","#000000","#000000","#000000","#000000","#000000")

# Create bar plots
exp_bar_plot <- ggplot(data=m_dt_output_ribo_rna_bar_subset_1, aes(x=geneSymbol, y=value, fill=variable)) + 
  geom_bar(stat="identity", color="black", position=position_dodge()) + 
  ylim(-2,2) + 
  theme_pubr() + 
  scale_fill_manual(values=col_base) + 
  theme(legend.position="right")

as_ggplot(get_legend(exp_bar_plot))
ggsave("ribo_rna_bar_plot_s6het_p53wt_vs_s6wt_p53wt_legend.pdf", device="pdf", useDingbats = FALSE)


exp_bar_plot <- exp_bar_plot + 
  coord_flip() + 
  theme(axis.title = element_blank(),
        axis.text.y=element_text(size=10),
        axis.text.x=element_text(size=10),
        legend.position="none")

ggsave("ribo_rna_bar_plot_s6het_p53wt_vs_s6wt_p53wt.pdf", device="pdf", useDingbats = FALSE, width=3, height=2.75, units="in")


### PLOT TRENDS IN 5UTR and length
# Group by FDR levels and plot against various features
# colnames(efit_te) 
# [1] "s6het_p53wt_TE_vs_s6wt_p53wt_TE"
# [2] "s6het_p53null_TE_vs_s6wt_p53null_TE"
cont_vec_ind_subset <- c(1,2)

# colnames(res_table)
# indices for features of interest that need to be logged (length)
feature_ind_log <- c(11:14)
# indices for features of interest that don't need to be logged
feature_ind_nolog <- c(15:22)
# indices for features of interest that need to be absolute valued then logged then *-1 (foldUTR_mfe)
feature_ind_abs_log <- c(3:4)

for(i in cont_vec_ind_subset){
  for(j in feature_ind_log){
    res_table <- topTable(efit_te, coef=i, n=Inf)
    df_res_table <- data.frame(res_table)
    df_res_table$fdr_groups <- 1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC<0)] <- -0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC<0)] <- -0.1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC>0)] <- 0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC>0)] <- 0.1
    df_res_table$fdr_groups <- factor(df_res_table$fdr_groups)
    
    df_res_table_subset <- data.frame(df_res_table$gene_ID, df_res_table$geneSymbol, df_res_table$fdr_groups, as.numeric(df_res_table[,j]))
    colnames(df_res_table_subset) <- c("gene_ID", "geneSymbol", "fdr_groups", "feature_value")
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups)
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups, levels(df_res_table_subset$fdr_groups)[c(2,1,5,4,3)])
    
    # take log(abs())
    df_res_table_subset$feature_value <- log2(abs(df_res_table_subset$feature_value))
    
    title_feature <- colnames(df_res_table)[j]
    title_cont <- colnames(efit_te)[i]
    violin_plot_name <- paste("violin_fdr_groups_2", "_", title_cont, "_", title_feature, ".pdf", sep="")
    p <- ggplot(df_res_table_subset) + geom_violin(aes(x=fdr_groups, y=feature_value, fill=fdr_groups))
    # p <- p + scale_y_continuous(limits = c(-2, 2))
    p <- p + 
      scale_fill_manual(values=c("#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020")) + 
      theme_pubr() + 
      theme(axis.text.x = element_blank(), 
            axis.text.y = element_text(size=12),
            axis.title = element_blank(),
            axis.ticks.x = element_blank(),
            legend.position="right")
    
    violin_plot_legend_name <- paste("violin_fdr_groups_legend_2", "_", title_cont, "_", title_feature, ".pdf", sep="")
    as_ggplot(get_legend(p))
    ggsave(violin_plot_legend_name, device="pdf", useDingbats = FALSE)
    
    p <- p + theme(legend.position="none")
    p
    ggsave(violin_plot_name, plot=p, device="pdf", useDingbats = FALSE, width=2.25, height=1.875, units="in")
    
    wilcox_test_name <- paste("wilcox_test_2", "_", title_cont, "_", title_feature, ".txt", sep="")
    sink(wilcox_test_name)
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    sink()
  }
  
  for(k in feature_ind_nolog){
    res_table <- topTable(efit_te, coef=i, n=Inf)
    df_res_table <- data.frame(res_table)
    df_res_table$fdr_groups <- 1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC<0)] <- -0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC<0)] <- -0.1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC>0)] <- 0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC>0)] <- 0.1
    df_res_table$fdr_groups <- factor(df_res_table$fdr_groups)
    
    df_res_table_subset <- data.frame(df_res_table$gene_ID, df_res_table$geneSymbol, df_res_table$fdr_groups, as.numeric(df_res_table[,k]))
    colnames(df_res_table_subset) <- c("gene_ID", "geneSymbol", "fdr_groups", "feature_value")
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups)
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups, levels(df_res_table_subset$fdr_groups)[c(2,1,5,4,3)])
    
    title_feature <- colnames(df_res_table)[k]
    title_cont <- colnames(efit_te)[i]
    violin_plot_name <- paste("violin_fdr_groups_2", "_", title_cont, "_", title_feature, ".pdf", sep="")
    p <- ggplot(df_res_table_subset) + geom_violin(aes(x=fdr_groups, y=feature_value, fill=fdr_groups))
    # p <- p + scale_y_continuous(limits = c(-2, 2))
    p <- p + 
      scale_fill_manual(values=c("#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020")) + 
      theme_pubr() + 
      theme(axis.text.x = element_blank(), 
            axis.text.y = element_text(size=12),
            axis.title = element_blank(),
            axis.ticks.x = element_blank(),
            legend.position="right")
    
    violin_plot_legend_name <- paste("violin_fdr_groups_legend_2", "_", title_cont, "_", title_feature, ".pdf", sep="")
    as_ggplot(get_legend(p))
    ggsave(violin_plot_legend_name, device="pdf", useDingbats = FALSE)
    
    p <- p + theme(legend.position="none")
    p
    ggsave(violin_plot_name, plot=p, device="pdf", useDingbats = FALSE, width=2.4375, height=1.875, units="in")
    
    wilcox_test_name <- paste("wilcox_test_2", "_", title_cont, "_", title_feature, ".txt", sep="")
    sink(wilcox_test_name)
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    sink()
  }
  
  for(l in feature_ind_abs_log){
    res_table <- topTable(efit_te, coef=i, n=Inf)
    df_res_table <- data.frame(res_table)
    df_res_table$fdr_groups <- 1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC<0)] <- -0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC<0)] <- -0.1
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.3) & (df_res_table$logFC>0)] <- 0.3
    df_res_table$fdr_groups[(df_res_table$adj.P.Val<0.1) & (df_res_table$logFC>0)] <- 0.1
    df_res_table$fdr_groups <- factor(df_res_table$fdr_groups)
    
    df_res_table_subset <- data.frame(df_res_table$gene_ID, df_res_table$geneSymbol, df_res_table$fdr_groups, as.numeric(df_res_table[,l]))
    colnames(df_res_table_subset) <- c("gene_ID", "geneSymbol", "fdr_groups", "feature_value")
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups)
    df_res_table_subset$fdr_groups <- factor(df_res_table_subset$fdr_groups, levels(df_res_table_subset$fdr_groups)[c(2,1,5,4,3)])
    
    # take -1*log(abs())
    df_res_table_subset$feature_value <- -1*log2(abs(df_res_table_subset$feature_value))
    
    title_feature <- colnames(df_res_table)[l]
    title_cont <- colnames(efit_te)[i]
    violin_plot_name <- paste("violin_fdr_groups_2", "_", title_cont, "_", title_feature, ".pdf", sep="")
    p <- ggplot(df_res_table_subset) + geom_violin(aes(x=fdr_groups, y=feature_value, fill=fdr_groups))
    # p <- p + scale_y_continuous(limits = c(-2, 2))
    p <- p + 
      scale_fill_manual(values=c("#0571b0", "#92c5de", "#f7f7f7", "#f4a582", "#ca0020")) + 
      theme_pubr() + 
      theme(axis.text.x = element_blank(), 
            axis.text.y = element_text(size=12),
            axis.title = element_blank(),
            axis.ticks.x = element_blank(),
            legend.position="right")
    
    violin_plot_legend_name <- paste("violin_fdr_groups_legend_2", "_", title_cont, "_", title_feature, ".pdf", sep="")
    as_ggplot(get_legend(p))
    ggsave(violin_plot_legend_name, device="pdf", useDingbats = FALSE)
    
    p <- p + theme(legend.position="none")
    p
    ggsave(violin_plot_name, plot=p, device="pdf", useDingbats = FALSE, width=2.25, height=1.875, units="in")
    
    wilcox_test_name <- paste("wilcox_test_2", "_", title_cont, "_", title_feature, ".txt", sep="")
    sink(wilcox_test_name)
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    print(wilcox.test(df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(0.1)], 
                      df_res_table_subset$feature_value[df_res_table_subset$fdr_groups %in% c(-0.3, 1, 0.3)]))
    sink()
  }
}

# To extract Eif4ebp1 values:
eif4ebp1_te_norm_RPM <- v_te$E[v_te$genes$gene_ID=="ENSMUST00000033880.6",]
eif4ebp1_rna_norm_RPM <- v_rna$E[v_rna$genes$gene_ID=="ENSMUST00000033880.6",]
eif4ebp1_ribo_norm_RPM <- v_ribo$E[v_ribo$genes$gene_ID=="ENSMUST00000033880.6",]

write.csv(eif4ebp1_te_norm_RPM, file="eif4ebp1_te_norm_RPM.csv", row.names=TRUE)
write.csv(eif4ebp1_rna_norm_RPM, file="eif4ebp1_rna_norm_RPM.csv", row.names=TRUE)
write.csv(eif4ebp1_ribo_norm_RPM, file="eif4ebp1_ribo_norm_RPM.csv", row.names=TRUE)

# Make correlation matrix of counts AFTER FILTERING
# http://www.sthda.com/english/wiki/visualize-correlation-matrix-using-correlogram

# Ribo
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
M_ribo <- cor(lcpm_ribo, method = "pearson")
# with labels
pdf(file = "corr_ribo.pdf")
corrplot(M_ribo, method="number", # col=col(200),  
         type="upper", # order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # hide correlation coefficient on the principal diagonal
         diag=TRUE,
         cl.lim = c(0.95,1),
         cl.length = 6,
         is.corr = FALSE,
         number.digits=3,
         # tl.pos='n'
)
dev.off()

pdf(file = "corr_ribo_no_labels.pdf")
# without labels
corrplot(M_ribo, method="number", # col=col(200),  
         type="upper", # order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # hide correlation coefficient on the principal diagonal
         diag=TRUE,
         cl.lim = c(0.95,1),
         cl.length = 6,
         is.corr = FALSE,
         number.digits=3,
         tl.pos='n'
)
dev.off()

# RNA
# col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
M_rna <- cor(lcpm_rna, method = "pearson")
# with labels
pdf(file = "corr_rna.pdf")
corrplot(M_rna, method="number", # col=col(200),  
         type="upper", # order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # hide correlation coefficient on the principal diagonal
         diag=TRUE,
         cl.lim = c(0.95,1),
         cl.length = 6,
         is.corr = FALSE,
         number.digits=3,
         # tl.pos='n'
)
dev.off()

pdf(file = "corr_rna_no_labels.pdf")
# without labels
corrplot(M_rna, method="number", # col=col(200),  
         type="upper", # order="hclust", 
         addCoef.col = "black", # Add coefficient of correlation
         tl.col="black", tl.srt=45, #Text label color and rotation
         # hide correlation coefficient on the principal diagonal
         diag=TRUE,
         cl.lim = c(0.95,1),
         cl.length = 6,
         is.corr = FALSE,
         number.digits=3,
         tl.pos='n'
)
dev.off()